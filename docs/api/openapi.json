{
  "openapi": "3.1.0",
  "info": {
    "title": "Reddit Content Platform API",
    "description": "\n# Reddit Content Platform API\n\nA comprehensive platform for crawling Reddit content, analyzing trends, and generating blog posts.\n\n## Features\n\n- **Authentication**: OAuth2 with JWT tokens and refresh token support\n- **Keyword Management**: Track specific topics and keywords with CRUD operations\n- **Content Crawling**: Automated Reddit post collection with background processing\n- **Trend Analysis**: TF-IDF based trend analysis with caching\n- **Content Generation**: AI-powered blog post creation with templates\n- **Public Blog API**: Public endpoints for blog site integration\n- **Monitoring**: Prometheus metrics and comprehensive health checks\n\n## Authentication\n\nMost endpoints require authentication. Follow this flow:\n\n1. **Initiate Login**: `GET /api/v1/auth/login` - Redirects to Reddit OAuth2\n2. **Complete Login**: `POST /api/v1/auth/login` - Exchange code for JWT tokens\n3. **Use Access Token**: Include `Authorization: Bearer <access_token>` header\n4. **Refresh Token**: `POST /api/v1/auth/refresh` when access token expires\n\n### Token Lifecycle\n- **Access Token**: 15 minutes expiration\n- **Refresh Token**: 7 days expiration\n- **Auto-refresh**: Use refresh token to get new access tokens\n\n## Rate Limiting\n\nAPI requests are rate-limited to prevent abuse:\n- **General API**: 60 requests per minute per user\n- **Reddit API**: 60 requests per minute (shared across all users)\n- **Content Generation**: 10 requests per hour per user\n- **Public Blog API**: 100 requests per minute per IP (no auth required)\n\n## Pagination\n\nList endpoints support pagination with consistent parameters:\n- `page`: Page number (starts from 1)\n- `page_size` or `per_page`: Items per page (max 100)\n- `limit` and `offset`: Alternative pagination style for some endpoints\n\n## Error Handling\n\nAll errors follow a consistent format:\n```json\n{\n    \"error_code\": \"validation_error|unauthorized|forbidden|not_found|rate_limit|internal_error\",\n    \"message\": \"Human readable error message\",\n    \"details\": {\n        \"field_name\": [\"Specific validation errors\"]\n    },\n    \"timestamp\": \"2024-01-01T00:00:00Z\",\n    \"request_id\": \"uuid-v4-string\"\n}\n```\n\n## API Versioning\n\nThis API uses URL path versioning:\n- **Current Version**: `/api/v1/`\n- **Version Header**: `Accept: application/vnd.reddit-platform.v1+json` (optional)\n- **Deprecation**: Deprecated endpoints include `Sunset` header with removal date\n\n## Content Types\n\n- **Request**: `application/json` for POST/PUT requests\n- **Response**: `application/json` for all responses\n- **Metrics**: `text/plain` for Prometheus metrics endpoint\n- **Health**: `application/json` for health check endpoints\n        ",
    "version": "1.0.0",
    "contact": {
      "name": "Reddit Content Platform",
      "url": "https://github.com/your-username/reddit-content-platform",
      "email": "support@yourcompany.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "x-api-version": "1.0.0",
    "x-api-versions-supported": [
      "v1"
    ],
    "x-api-version-header": "X-API-Version",
    "x-api-media-type": "application/vnd.reddit-platform.v1+json"
  },
  "paths": {
    "/api/v1/auth/login": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Initiate OAuth2 login",
        "description": "Redirect to Reddit OAuth2 authorization page to start the login process.",
        "operationId": "login_api_v1_auth_login_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "302": {
            "description": "Redirect to Reddit OAuth2 authorization page"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/auth/callback": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "OAuth2 callback handler",
        "description": "Handle OAuth2 callback from Reddit and complete authentication process.",
        "operationId": "auth_callback_api_v1_auth_callback_get",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Code"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "State"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid authorization code or state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Refresh access token",
        "description": "Generate a new access token using a valid refresh token.",
        "operationId": "refresh_token_api_v1_auth_refresh_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefreshRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "New access token generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Logout user",
        "description": "Logout user by revoking the refresh token.",
        "operationId": "logout_api_v1_auth_logout_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefreshRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully logged out",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/me": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Get current user",
        "description": "Get information about the currently authenticated user.",
        "operationId": "get_current_user_info_api_v1_auth_me_get",
        "responses": {
          "200": {
            "description": "Current user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/status": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Check authentication status",
        "description": "Check if the current request is authenticated.",
        "operationId": "auth_status_api_v1_auth_status_get",
        "responses": {
          "200": {
            "description": "Authentication status",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "authenticated": true,
                  "user_id": 123,
                  "username": "example_user"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/keywords/": {
      "post": {
        "tags": [
          "keywords"
        ],
        "summary": "Create Keyword",
        "description": "Create a new keyword for the authenticated user.\n\n- **keyword**: The keyword to track (required, 1-255 characters)\n- **is_active**: Whether the keyword is active for crawling (default: true)\n\nReturns the created keyword with its ID and timestamps.",
        "operationId": "create_keyword_api_v1_keywords__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeywordCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeywordResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "keywords"
        ],
        "summary": "Get Keywords",
        "description": "Get all keywords for the authenticated user with pagination.\n\n- **page**: Page number (starts from 1)\n- **per_page**: Number of items per page (1-100)\n- **active_only**: If true, only return active keywords\n\nReturns paginated list of keywords with metadata.",
        "operationId": "get_keywords_api_v1_keywords__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 20,
              "title": "Per Page"
            },
            "description": "Items per page"
          },
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Filter to active keywords only",
              "default": false,
              "title": "Active Only"
            },
            "description": "Filter to active keywords only"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeywordListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/keywords/{keyword_id}": {
      "get": {
        "tags": [
          "keywords"
        ],
        "summary": "Get Keyword",
        "description": "Get a specific keyword by ID.\n\n- **keyword_id**: ID of the keyword to retrieve\n\nReturns the keyword if it exists and belongs to the authenticated user.",
        "operationId": "get_keyword_api_v1_keywords__keyword_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "keyword_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Keyword Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeywordResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "keywords"
        ],
        "summary": "Update Keyword",
        "description": "Update an existing keyword.\n\n- **keyword_id**: ID of the keyword to update\n- **keyword**: New keyword text (optional)\n- **is_active**: New active status (optional)\n\nReturns the updated keyword.",
        "operationId": "update_keyword_api_v1_keywords__keyword_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "keyword_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Keyword Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeywordUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeywordResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "keywords"
        ],
        "summary": "Delete Keyword",
        "description": "Delete a keyword.\n\n- **keyword_id**: ID of the keyword to delete\n\nThis will also delete all associated posts and blog content.",
        "operationId": "delete_keyword_api_v1_keywords__keyword_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "keyword_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Keyword Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/keywords/check-duplicate": {
      "post": {
        "tags": [
          "keywords"
        ],
        "summary": "Check Keyword Duplicate",
        "description": "Check if a keyword already exists for the user.\n\n- **keyword**: The keyword to check\n\nReturns whether the keyword already exists.",
        "operationId": "check_keyword_duplicate_api_v1_keywords_check_duplicate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeywordCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/tasks/status/{task_id}": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get Task Status",
        "description": "Get the status of a specific task.\n\nArgs:\n    task_id: The Celery task ID\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Task status information",
        "operationId": "get_task_status_api_v1_tasks_status__task_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Task Status Api V1 Tasks Status  Task Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/cancel/{task_id}": {
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Cancel Task",
        "description": "Cancel a running task.\n\nArgs:\n    task_id: The Celery task ID\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Cancellation result",
        "operationId": "cancel_task_api_v1_tasks_cancel__task_id__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Cancel Task Api V1 Tasks Cancel  Task Id  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/user-tasks": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get User Tasks",
        "description": "Get tasks for the current user.\n\nArgs:\n    task_type: Optional filter by task type\n    limit: Maximum number of tasks to return\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    List of user tasks",
        "operationId": "get_user_tasks_api_v1_tasks_user_tasks_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by task type",
              "title": "Task Type"
            },
            "description": "Filter by task type"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum number of tasks to return",
              "default": 50,
              "title": "Limit"
            },
            "description": "Maximum number of tasks to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get User Tasks Api V1 Tasks User Tasks Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/statistics": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get Task Statistics",
        "description": "Get task execution statistics for the current user.\n\nArgs:\n    days: Number of days to include in statistics\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Task statistics",
        "operationId": "get_task_statistics_api_v1_tasks_statistics_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 1,
              "description": "Number of days to include in statistics",
              "default": 7,
              "title": "Days"
            },
            "description": "Number of days to include in statistics"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Task Statistics Api V1 Tasks Statistics Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/test": {
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Start Test Task",
        "description": "Start a test task to verify Celery functionality.\n\nArgs:\n    should_fail: Whether the task should fail to test retry logic\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Task start result",
        "operationId": "start_test_task_api_v1_tasks_test_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "should_fail",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether the task should fail to test retry logic",
              "default": false,
              "title": "Should Fail"
            },
            "description": "Whether the task should fail to test retry logic"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Start Test Task Api V1 Tasks Test Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/health-check": {
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Start Health Check",
        "description": "Start a health check task.\n\nArgs:\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Health check task start result",
        "operationId": "start_health_check_api_v1_tasks_health_check_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Start Health Check Api V1 Tasks Health Check Post"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/tasks/cleanup": {
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Start Cleanup Task",
        "description": "Start a task cleanup operation.\n\nArgs:\n    days_old: Remove tasks older than this many days\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Cleanup task start result",
        "operationId": "start_cleanup_task_api_v1_tasks_cleanup_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days_old",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 1,
              "description": "Remove tasks older than this many days",
              "default": 30,
              "title": "Days Old"
            },
            "description": "Remove tasks older than this many days"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Start Cleanup Task Api V1 Tasks Cleanup Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reddit/health": {
      "get": {
        "tags": [
          "reddit"
        ],
        "summary": "Reddit Health Check",
        "description": "Check Reddit API connection health.",
        "operationId": "reddit_health_check_api_v1_reddit_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedditHealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reddit/search": {
      "get": {
        "tags": [
          "reddit"
        ],
        "summary": "Search Reddit Posts",
        "description": "Search Reddit posts by keyword.\nRequires authentication.",
        "operationId": "search_reddit_posts_api_v1_reddit_search_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "keyword",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Keyword to search for",
              "title": "Keyword"
            },
            "description": "Keyword to search for"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of posts to retrieve",
              "default": 10,
              "title": "Limit"
            },
            "description": "Number of posts to retrieve"
          },
          {
            "name": "time_filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Time filter (hour, day, week, month, year, all)",
              "default": "week",
              "title": "Time Filter"
            },
            "description": "Time filter (hour, day, week, month, year, all)"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort method (relevance, hot, top, new, comments)",
              "default": "hot",
              "title": "Sort"
            },
            "description": "Sort method (relevance, hot, top, new, comments)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RedditPostResponse"
                  },
                  "title": "Response Search Reddit Posts Api V1 Reddit Search Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reddit/posts/{post_id}/comments": {
      "get": {
        "tags": [
          "reddit"
        ],
        "summary": "Get Reddit Post Comments",
        "description": "Get comments for a specific Reddit post.\nRequires authentication.",
        "operationId": "get_reddit_post_comments_api_v1_reddit_posts__post_id__comments_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Post Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of comments to retrieve",
              "default": 20,
              "title": "Limit"
            },
            "description": "Number of comments to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RedditCommentResponse"
                  },
                  "title": "Response Get Reddit Post Comments Api V1 Reddit Posts  Post Id  Comments Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/reddit/subreddit/{subreddit_name}": {
      "get": {
        "tags": [
          "reddit"
        ],
        "summary": "Get Subreddit Posts",
        "description": "Get posts from a specific subreddit.\nRequires authentication.",
        "operationId": "get_subreddit_posts_api_v1_reddit_subreddit__subreddit_name__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "subreddit_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Subreddit Name"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of posts to retrieve",
              "default": 10,
              "title": "Limit"
            },
            "description": "Number of posts to retrieve"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort method (hot, new, top, rising)",
              "default": "hot",
              "title": "Sort"
            },
            "description": "Sort method (hot, new, top, rising)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RedditPostResponse"
                  },
                  "title": "Response Get Subreddit Posts Api V1 Reddit Subreddit  Subreddit Name  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/crawling/keyword/{keyword_id}": {
      "post": {
        "tags": [
          "crawling"
        ],
        "summary": "Start Keyword Crawl",
        "description": "Start crawling Reddit posts for a specific keyword.\n\nArgs:\n    keyword_id: ID of the keyword to crawl posts for\n    limit: Maximum number of posts to crawl\n    time_filter: Time filter for posts (hour, day, week, month, year, all)\n    sort: Sort method (relevance, hot, top, new, comments)\n    include_comments: Whether to fetch comments for each post\n    comment_limit: Maximum number of comments per post\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Crawl task start result",
        "operationId": "start_keyword_crawl_api_v1_crawling_keyword__keyword_id__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "keyword_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the keyword to crawl posts for",
              "title": "Keyword Id"
            },
            "description": "ID of the keyword to crawl posts for"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "description": "Maximum number of posts to crawl",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of posts to crawl"
          },
          {
            "name": "time_filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(hour|day|week|month|year|all)$",
              "description": "Time filter for posts",
              "default": "week",
              "title": "Time Filter"
            },
            "description": "Time filter for posts"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(relevance|hot|top|new|comments)$",
              "description": "Sort method for posts",
              "default": "hot",
              "title": "Sort"
            },
            "description": "Sort method for posts"
          },
          {
            "name": "include_comments",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to fetch comments for each post",
              "default": true,
              "title": "Include Comments"
            },
            "description": "Whether to fetch comments for each post"
          },
          {
            "name": "comment_limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 0,
              "description": "Maximum number of comments per post",
              "default": 20,
              "title": "Comment Limit"
            },
            "description": "Maximum number of comments per post"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Start Keyword Crawl Api V1 Crawling Keyword  Keyword Id  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/crawling/all-keywords": {
      "post": {
        "tags": [
          "crawling"
        ],
        "summary": "Start All Keywords Crawl",
        "description": "Start crawling Reddit posts for all active keywords of the current user.\n\nArgs:\n    limit_per_keyword: Maximum number of posts per keyword\n    time_filter: Time filter for posts (hour, day, week, month, year, all)\n    sort: Sort method (relevance, hot, top, new, comments)\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Crawl task start result",
        "operationId": "start_all_keywords_crawl_api_v1_crawling_all_keywords_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit_per_keyword",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "minimum": 1,
              "description": "Maximum number of posts per keyword",
              "default": 50,
              "title": "Limit Per Keyword"
            },
            "description": "Maximum number of posts per keyword"
          },
          {
            "name": "time_filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(hour|day|week|month|year|all)$",
              "description": "Time filter for posts",
              "default": "day",
              "title": "Time Filter"
            },
            "description": "Time filter for posts"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(relevance|hot|top|new|comments)$",
              "description": "Sort method for posts",
              "default": "hot",
              "title": "Sort"
            },
            "description": "Sort method for posts"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Start All Keywords Crawl Api V1 Crawling All Keywords Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/crawling/subreddit": {
      "post": {
        "tags": [
          "crawling"
        ],
        "summary": "Start Subreddit Crawl",
        "description": "Start crawling Reddit posts from a specific subreddit.\n\nArgs:\n    subreddit_name: Name of the subreddit to crawl\n    keyword_id: ID of the keyword to associate posts with\n    limit: Maximum number of posts to crawl\n    sort: Sort method (hot, new, top, rising)\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Crawl task start result",
        "operationId": "start_subreddit_crawl_api_v1_crawling_subreddit_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "subreddit_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 50,
              "description": "Name of the subreddit to crawl",
              "title": "Subreddit Name"
            },
            "description": "Name of the subreddit to crawl"
          },
          {
            "name": "keyword_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the keyword to associate posts with",
              "title": "Keyword Id"
            },
            "description": "ID of the keyword to associate posts with"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "description": "Maximum number of posts to crawl",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of posts to crawl"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(hot|new|top|rising)$",
              "description": "Sort method for posts",
              "default": "hot",
              "title": "Sort"
            },
            "description": "Sort method for posts"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Start Subreddit Crawl Api V1 Crawling Subreddit Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/crawling/status": {
      "get": {
        "tags": [
          "crawling"
        ],
        "summary": "Get Crawl Status",
        "description": "Get the status of all crawling tasks for the current user.\n\nArgs:\n    limit: Maximum number of tasks to return\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Crawling tasks status",
        "operationId": "get_crawl_status_api_v1_crawling_status_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum number of tasks to return",
              "default": 20,
              "title": "Limit"
            },
            "description": "Maximum number of tasks to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Crawl Status Api V1 Crawling Status Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/crawling/statistics": {
      "get": {
        "tags": [
          "crawling"
        ],
        "summary": "Get Crawl Statistics",
        "description": "Get crawling statistics for the current user.\n\nArgs:\n    days: Number of days to include in statistics\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Crawling statistics",
        "operationId": "get_crawl_statistics_api_v1_crawling_statistics_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 1,
              "description": "Number of days to include in statistics",
              "default": 7,
              "title": "Days"
            },
            "description": "Number of days to include in statistics"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Crawl Statistics Api V1 Crawling Statistics Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/crawling/task/{task_id}": {
      "delete": {
        "tags": [
          "crawling"
        ],
        "summary": "Cancel Crawl Task",
        "description": "Cancel a running crawling task.\n\nArgs:\n    task_id: ID of the task to cancel\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Cancellation result",
        "operationId": "cancel_crawl_task_api_v1_crawling_task__task_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the task to cancel",
              "title": "Task Id"
            },
            "description": "ID of the task to cancel"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Cancel Crawl Task Api V1 Crawling Task  Task Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/posts/": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Get Posts",
        "description": "Get paginated list of posts with filtering and sorting options.\nOnly returns posts from keywords owned by the authenticated user.\n\n**Filtering Options:**\n- keyword_id: Filter by specific keyword\n- subreddit: Filter by subreddit name (partial match)\n- author: Filter by author name (partial match)\n- search: Search in post title and content\n- min_score/max_score: Filter by score range\n- date_from/date_to: Filter by post creation date range\n\n**Sorting Options:**\n- sort_by: Field to sort by (created_at, post_created_at, score, num_comments, title, author, subreddit)\n- sort_order: asc or desc",
        "operationId": "get_posts_api_v1_posts__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 10,
              "title": "Per Page"
            },
            "description": "Items per page"
          },
          {
            "name": "keyword_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by keyword ID",
              "title": "Keyword Id"
            },
            "description": "Filter by keyword ID"
          },
          {
            "name": "subreddit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by subreddit",
              "title": "Subreddit"
            },
            "description": "Filter by subreddit"
          },
          {
            "name": "author",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by author",
              "title": "Author"
            },
            "description": "Filter by author"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search in title and content",
              "title": "Search"
            },
            "description": "Search in title and content"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort field (created_at, post_created_at, score, num_comments, title, author, subreddit)",
              "default": "created_at",
              "title": "Sort By"
            },
            "description": "Sort field (created_at, post_created_at, score, num_comments, title, author, subreddit)"
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(asc|desc)$",
              "description": "Sort order",
              "default": "desc",
              "title": "Sort Order"
            },
            "description": "Sort order"
          },
          {
            "name": "min_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Minimum score filter",
              "title": "Min Score"
            },
            "description": "Minimum score filter"
          },
          {
            "name": "max_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Maximum score filter",
              "title": "Max Score"
            },
            "description": "Maximum score filter"
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter posts from this date (ISO format)",
              "title": "Date From"
            },
            "description": "Filter posts from this date (ISO format)"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter posts to this date (ISO format)",
              "title": "Date To"
            },
            "description": "Filter posts to this date (ISO format)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/posts/{post_id}": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Get Post Detail",
        "description": "Get detailed information about a specific post, including comments.\nOnly returns post if it belongs to a keyword owned by the authenticated user.",
        "operationId": "get_post_detail_api_v1_posts__post_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/posts/keyword/{keyword_id}": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Get Posts By Keyword",
        "description": "Get posts for a specific keyword.\nOnly returns posts if the keyword belongs to the authenticated user.",
        "operationId": "get_posts_by_keyword_api_v1_posts_keyword__keyword_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "keyword_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Keyword Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 10,
              "title": "Per Page"
            },
            "description": "Items per page"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort field",
              "default": "created_at",
              "title": "Sort By"
            },
            "description": "Sort field"
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(asc|desc)$",
              "description": "Sort order",
              "default": "desc",
              "title": "Sort Order"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/posts/search/query": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Search Posts",
        "description": "Search posts by title and content.\nOnly searches in posts from keywords owned by the authenticated user.",
        "operationId": "search_posts_api_v1_posts_search_query_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Search query",
              "title": "Q"
            },
            "description": "Search query"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 10,
              "title": "Per Page"
            },
            "description": "Items per page"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort field",
              "default": "created_at",
              "title": "Sort By"
            },
            "description": "Sort field"
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(asc|desc)$",
              "description": "Sort order",
              "default": "desc",
              "title": "Sort Order"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/posts/stats/summary": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Get Post Statistics",
        "description": "Get statistics about user's posts.\nReturns summary information like total posts, average score, etc.",
        "operationId": "get_post_statistics_api_v1_posts_stats_summary_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/trends/analyze/{keyword_id}": {
      "post": {
        "tags": [
          "trends"
        ],
        "summary": "Start Trend Analysis",
        "description": "Start trend analysis for a specific keyword.\n\nArgs:\n    keyword_id: ID of the keyword to analyze\n    background_tasks: FastAPI background tasks\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Task information",
        "operationId": "start_trend_analysis_api_v1_trends_analyze__keyword_id__post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "keyword_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Keyword Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Start Trend Analysis Api V1 Trends Analyze  Keyword Id  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/trends/analyze-all": {
      "post": {
        "tags": [
          "trends"
        ],
        "summary": "Start Bulk Trend Analysis",
        "description": "Start trend analysis for all user's keywords.\n\nArgs:\n    background_tasks: FastAPI background tasks\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Task information",
        "operationId": "start_bulk_trend_analysis_api_v1_trends_analyze_all_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Start Bulk Trend Analysis Api V1 Trends Analyze All Post"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/trends/results/{keyword_id}": {
      "get": {
        "tags": [
          "trends"
        ],
        "summary": "Get Trend Analysis Results",
        "description": "Get trend analysis results for a specific keyword.\nEnhanced with force refresh capability.\n\nArgs:\n    keyword_id: ID of the keyword\n    force_refresh: Force refresh of cached data\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Trend analysis results",
        "operationId": "get_trend_analysis_results_api_v1_trends_results__keyword_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "keyword_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Keyword Id"
            }
          },
          {
            "name": "force_refresh",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force refresh of cached data",
              "default": false,
              "title": "Force Refresh"
            },
            "description": "Force refresh of cached data"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrendAnalysisResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/trends/rankings": {
      "get": {
        "tags": [
          "trends"
        ],
        "summary": "Get Keyword Rankings",
        "description": "Get keyword importance rankings for the current user.\nEnhanced with caching and force refresh capability.\n\nArgs:\n    force_refresh: Force refresh of cached rankings\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Keyword rankings",
        "operationId": "get_keyword_rankings_api_v1_trends_rankings_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "force_refresh",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force refresh of cached rankings",
              "default": false,
              "title": "Force Refresh"
            },
            "description": "Force refresh of cached rankings"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeywordRankingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/trends/rankings/calculate": {
      "post": {
        "tags": [
          "trends"
        ],
        "summary": "Calculate Keyword Rankings",
        "description": "Start calculation of keyword importance rankings.\n\nArgs:\n    background_tasks: FastAPI background tasks\n    current_user: Current authenticated user\n    \nReturns:\n    Task information",
        "operationId": "calculate_keyword_rankings_api_v1_trends_rankings_calculate_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Calculate Keyword Rankings Api V1 Trends Rankings Calculate Post"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/trends/status/{task_id}": {
      "get": {
        "tags": [
          "trends"
        ],
        "summary": "Get Analysis Task Status",
        "description": "Get the status of a trend analysis task.\n\nArgs:\n    task_id: ID of the task\n    current_user: Current authenticated user\n    \nReturns:\n    Task status information",
        "operationId": "get_analysis_task_status_api_v1_trends_status__task_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/trends/cache/{keyword_id}": {
      "delete": {
        "tags": [
          "trends"
        ],
        "summary": "Clear Trend Cache",
        "description": "Clear cached trend data for a specific keyword.\n\nArgs:\n    keyword_id: ID of the keyword\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Success message",
        "operationId": "clear_trend_cache_api_v1_trends_cache__keyword_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "keyword_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Keyword Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/trends/history/{keyword_id}": {
      "get": {
        "tags": [
          "trends"
        ],
        "summary": "Get Trend History",
        "description": "Get trend history for a specific keyword.\n\nArgs:\n    keyword_id: ID of the keyword\n    days: Number of days of history to retrieve (1-30)\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Historical trend data",
        "operationId": "get_trend_history_api_v1_trends_history__keyword_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "keyword_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Keyword Id"
            }
          },
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 30,
              "minimum": 1,
              "description": "Number of days of history to retrieve",
              "default": 7,
              "title": "Days"
            },
            "description": "Number of days of history to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/trends/summary": {
      "get": {
        "tags": [
          "trends"
        ],
        "summary": "Get Trend Summary",
        "description": "Get comprehensive trend summary for all user keywords.\n\nArgs:\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Comprehensive trend summary",
        "operationId": "get_trend_summary_api_v1_trends_summary_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/trends/compare": {
      "post": {
        "tags": [
          "trends"
        ],
        "summary": "Compare Keyword Trends",
        "description": "Compare trend data across multiple keywords.\n\nArgs:\n    request: Comparison request with keyword IDs\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Comparison data for the keywords",
        "operationId": "compare_keyword_trends_api_v1_trends_compare_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrendComparisonRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrendComparisonResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/trends/cache/user": {
      "delete": {
        "tags": [
          "trends"
        ],
        "summary": "Clear User Trend Cache",
        "description": "Clear all cached trend data for the current user.\n\nArgs:\n    current_user: Current authenticated user\n    db: Database session\n    \nReturns:\n    Success message with count of cleared items",
        "operationId": "clear_user_trend_cache_api_v1_trends_cache_user_delete",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/trends/cache/stats": {
      "get": {
        "tags": [
          "trends"
        ],
        "summary": "Get Cache Statistics",
        "description": "Get cache statistics for trend data.\n\nArgs:\n    current_user: Current authenticated user\n    \nReturns:\n    Cache statistics",
        "operationId": "get_cache_statistics_api_v1_trends_cache_stats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/content/generate": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Generate Content",
        "description": "Generate blog content for a keyword.",
        "operationId": "generate_content_api_v1_content_generate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentGenerationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/content/batch-generate": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Batch Generate Content",
        "description": "Generate blog content for multiple keywords.",
        "operationId": "batch_generate_content_api_v1_content_batch_generate_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "template_type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "default",
              "title": "Template Type"
            }
          },
          {
            "name": "include_trends",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Include Trends"
            }
          },
          {
            "name": "include_top_posts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Include Top Posts"
            }
          },
          {
            "name": "max_posts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Max Posts"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "title": "Keyword Ids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentGenerationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/content/generation-status/{task_id}": {
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get Generation Status",
        "description": "Get content generation task status.",
        "operationId": "get_generation_status_api_v1_content_generation_status__task_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentGenerationStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/content/preview": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Preview Content",
        "description": "Generate a preview of content without saving.",
        "operationId": "preview_content_api_v1_content_preview_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentGenerationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentPreview"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/content/": {
      "get": {
        "tags": [
          "content"
        ],
        "summary": "List Content",
        "description": "List blog content for the current user.",
        "operationId": "list_content_api_v1_content__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Size"
            }
          },
          {
            "name": "keyword_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Keyword Id"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogContentListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/content/{content_id}": {
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get Content",
        "description": "Get specific blog content.",
        "operationId": "get_content_api_v1_content__content_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Content Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogContentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "content"
        ],
        "summary": "Update Content",
        "description": "Update blog content.",
        "operationId": "update_content_api_v1_content__content_id__put",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Content Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogContentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogContentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "content"
        ],
        "summary": "Delete Content",
        "description": "Delete blog content.",
        "operationId": "delete_content_api_v1_content__content_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Content Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/content/{content_id}/regenerate": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Regenerate Content",
        "description": "Regenerate existing blog content.",
        "operationId": "regenerate_content_api_v1_content__content_id__regenerate_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Content Id"
            }
          },
          {
            "name": "template_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Template Type"
            }
          },
          {
            "name": "custom_prompt",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Custom Prompt"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentGenerationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/content/templates/": {
      "get": {
        "tags": [
          "content"
        ],
        "summary": "List Templates",
        "description": "List available content templates.",
        "operationId": "list_templates_api_v1_content_templates__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/blog/posts": {
      "get": {
        "tags": [
          "public-blog"
        ],
        "summary": "List Blog Posts",
        "description": "Get paginated list of published blog posts.",
        "operationId": "list_blog_posts_api_v1_blog_posts_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "description": "Posts per page",
              "default": 10,
              "title": "Size"
            },
            "description": "Posts per page"
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by category (keyword)",
              "title": "Category"
            },
            "description": "Filter by category (keyword)"
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by tag",
              "title": "Tag"
            },
            "description": "Filter by tag"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(latest|oldest|popular)$",
              "description": "Sort order",
              "default": "latest",
              "title": "Sort"
            },
            "description": "Sort order"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicBlogPostListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/blog/posts/{slug}": {
      "get": {
        "tags": [
          "public-blog"
        ],
        "summary": "Get Blog Post By Slug",
        "description": "Get a specific blog post by slug.",
        "operationId": "get_blog_post_by_slug_api_v1_blog_posts__slug__get",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Slug"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicBlogPostDetail"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/blog/categories": {
      "get": {
        "tags": [
          "public-blog"
        ],
        "summary": "List Blog Categories",
        "description": "Get list of blog categories (based on keywords with published posts).",
        "operationId": "list_blog_categories_api_v1_blog_categories_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BlogCategoryResponse"
                  },
                  "type": "array",
                  "title": "Response List Blog Categories Api V1 Blog Categories Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/blog/tags": {
      "get": {
        "tags": [
          "public-blog"
        ],
        "summary": "List Blog Tags",
        "description": "Get list of blog tags with post counts.",
        "operationId": "list_blog_tags_api_v1_blog_tags_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BlogTagResponse"
                  },
                  "type": "array",
                  "title": "Response List Blog Tags Api V1 Blog Tags Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/blog/search": {
      "get": {
        "tags": [
          "public-blog"
        ],
        "summary": "Search Blog Posts",
        "description": "Search blog posts by title, content, and tags.",
        "operationId": "search_blog_posts_api_v1_blog_search_get",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Search query",
              "title": "Q"
            },
            "description": "Search query"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "description": "Posts per page",
              "default": 10,
              "title": "Size"
            },
            "description": "Posts per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogSearchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/blog/archive/{year}/{month}": {
      "get": {
        "tags": [
          "public-blog"
        ],
        "summary": "Get Blog Archive",
        "description": "Get blog posts for a specific month and year.",
        "operationId": "get_blog_archive_api_v1_blog_archive__year___month__get",
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "maximum": 2030,
              "minimum": 2020,
              "description": "Year",
              "title": "Year"
            },
            "description": "Year"
          },
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "maximum": 12,
              "minimum": 1,
              "description": "Month",
              "title": "Month"
            },
            "description": "Month"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogArchiveResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/blog/stats": {
      "get": {
        "tags": [
          "public-blog"
        ],
        "summary": "Get Blog Stats",
        "description": "Get blog statistics.",
        "operationId": "get_blog_stats_api_v1_blog_stats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogStatsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/blog/posts/{post_id}/related": {
      "get": {
        "tags": [
          "public-blog"
        ],
        "summary": "Get Related Posts",
        "description": "Get related posts based on tags and category.",
        "operationId": "get_related_posts_api_v1_blog_posts__post_id__related_get",
        "parameters": [
          {
            "name": "post_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Post Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10,
              "minimum": 1,
              "description": "Number of related posts",
              "default": 5,
              "title": "Limit"
            },
            "description": "Number of related posts"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RelatedPostResponse"
                  },
                  "title": "Response Get Related Posts Api V1 Blog Posts  Post Id  Related Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/blog/rss": {
      "get": {
        "tags": [
          "public-blog"
        ],
        "summary": "Get Rss Feed",
        "description": "Generate RSS feed for the blog.",
        "operationId": "get_rss_feed_api_v1_blog_rss_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "description": "Number of posts in feed",
              "default": 20,
              "title": "Limit"
            },
            "description": "Number of posts in feed"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RSSFeedResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/blog/sitemap": {
      "get": {
        "tags": [
          "public-blog"
        ],
        "summary": "Get Sitemap",
        "description": "Generate sitemap for the blog.",
        "operationId": "get_sitemap_api_v1_blog_sitemap_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SitemapResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/health/": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Health Check",
        "description": "Get overall system health status.\n\nThis endpoint checks the health of all critical system components:\n- Database connectivity\n- Redis connectivity  \n- Celery worker status\n\nArgs:\n    details: Whether to include detailed service information\n    \nReturns:\n    Overall health status with optional service details\n    \nRaises:\n    HTTPException: If health check fails",
        "operationId": "health_check_api_v1_health__get",
        "parameters": [
          {
            "name": "details",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include detailed service status",
              "default": false,
              "title": "Details"
            },
            "description": "Include detailed service status"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/health/database": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Database Health",
        "description": "Check database connectivity and performance.\n\nReturns:\n    Database health status with response time\n    \nRaises:\n    HTTPException: If database check fails",
        "operationId": "database_health_api_v1_health_database_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceHealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/health/redis": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Redis Health",
        "description": "Check Redis connectivity and performance.\n\nReturns:\n    Redis health status with response time\n    \nRaises:\n    HTTPException: If Redis check fails",
        "operationId": "redis_health_api_v1_health_redis_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceHealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/health/celery": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Celery Health",
        "description": "Check Celery worker status and availability.\n\nReturns:\n    Celery health status with active worker count\n    \nRaises:\n    HTTPException: If Celery check fails",
        "operationId": "celery_health_api_v1_health_celery_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceHealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/health/reddit": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Reddit Api Health",
        "description": "Check Reddit API connectivity and authentication.\n\nReturns:\n    Reddit API health status with response time\n    \nRaises:\n    HTTPException: If Reddit API check fails",
        "operationId": "reddit_api_health_api_v1_health_reddit_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceHealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/health/ready": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Readiness Check",
        "description": "Kubernetes/Docker readiness probe endpoint.\n\nThis is a lightweight check to determine if the service is ready to accept traffic.\n\nReturns:\n    Simple ready status\n    \nRaises:\n    HTTPException: If service is not ready",
        "operationId": "readiness_check_api_v1_health_ready_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Readiness Check Api V1 Health Ready Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/health/live": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Liveness Check",
        "description": "Kubernetes/Docker liveness probe endpoint.\n\nThis is a minimal check to determine if the service is alive.\n\nReturns:\n    Simple alive status",
        "operationId": "liveness_check_api_v1_health_live_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Liveness Check Api V1 Health Live Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/system/metrics": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get System Metrics",
        "description": "Get system metrics for monitoring dashboard.\n\nArgs:\n    time_range: Time range for metrics (1h, 6h, 24h, 7d)\n    current_user: Authenticated user\n    \nReturns:\n    List of system metrics data points\n    \nRaises:\n    HTTPException: If metrics collection fails",
        "operationId": "get_system_metrics_api_v1_system_metrics_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "time_range",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Time range: 1h, 6h, 24h, 7d",
              "default": "1h",
              "title": "Time Range"
            },
            "description": "Time range: 1h, 6h, 24h, 7d"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SystemMetrics"
                  },
                  "title": "Response Get System Metrics Api V1 System Metrics Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/system/health": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get System Health",
        "description": "Get comprehensive system health status.\n\nArgs:\n    current_user: Authenticated user\n    \nReturns:\n    System health status with service details\n    \nRaises:\n    HTTPException: If health check fails",
        "operationId": "get_system_health_api_v1_system_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemHealth"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/system/alerts": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get System Alerts",
        "description": "Get system alerts and warnings.\n\nArgs:\n    resolved: Filter by resolved status (None for all)\n    current_user: Authenticated user\n    \nReturns:\n    List of system alerts\n    \nRaises:\n    HTTPException: If alert retrieval fails",
        "operationId": "get_system_alerts_api_v1_system_alerts_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "resolved",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by resolved status",
              "title": "Resolved"
            },
            "description": "Filter by resolved status"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertInfo"
                  },
                  "title": "Response Get System Alerts Api V1 System Alerts Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/system/info": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get System Info",
        "description": "Get system information and configuration.\n\nArgs:\n    current_user: Authenticated user\n    \nReturns:\n    System information\n    \nRaises:\n    HTTPException: If system info retrieval fails",
        "operationId": "get_system_info_api_v1_system_info_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get System Info Api V1 System Info Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/": {
      "get": {
        "summary": "Root",
        "description": "Root endpoint for API v1.",
        "operationId": "root_api_v1__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Get Prometheus metrics",
        "description": "Retrieve Prometheus-formatted metrics for monitoring system performance and health.",
        "operationId": "metrics_metrics_get",
        "responses": {
          "200": {
            "description": "Prometheus metrics in text format",
            "content": {
              "application/json": {
                "schema": {}
              },
              "text/plain": {
                "example": "# HELP api_requests_total Total API requests\n# TYPE api_requests_total counter\napi_requests_total{method=\"GET\",endpoint=\"/health\"} 42"
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Basic health check",
        "description": "Simple health check endpoint that returns the basic status of the service.",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "status": "healthy",
                  "service": "reddit-content-platform"
                }
              }
            }
          }
        }
      }
    },
    "/health/detailed": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Detailed health check",
        "description": "Comprehensive health check that verifies the status of all system components including database, Redis, and Celery workers.",
        "operationId": "detailed_health_check_health_detailed_get",
        "responses": {
          "200": {
            "description": "Detailed health status of all components",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "status": "healthy",
                  "timestamp": "2024-01-01T00:00:00Z",
                  "services": {
                    "database": {
                      "status": "healthy",
                      "response_time_ms": 5
                    },
                    "redis": {
                      "status": "healthy",
                      "response_time_ms": 2
                    },
                    "celery": {
                      "status": "healthy",
                      "active_workers": 3
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "One or more services are unhealthy",
            "content": {
              "application/json": {
                "example": {
                  "status": "unhealthy",
                  "timestamp": "2024-01-01T00:00:00Z",
                  "services": {
                    "database": {
                      "status": "unhealthy",
                      "error": "Connection timeout"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/health/{service_name}": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Service-specific health check",
        "description": "Check the health status of a specific service component (database, redis, celery).",
        "operationId": "service_health_check_health__service_name__get",
        "parameters": [
          {
            "name": "service_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Service Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service health status",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "service": "database",
                  "status": "healthy",
                  "response_time_ms": 5,
                  "details": {
                    "connection_pool": "active",
                    "queries_per_second": 150
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "example": {
                  "error": "service_not_found",
                  "detail": "Service 'unknown' not found"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/version": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Get API version information",
        "description": "Retrieve comprehensive API version information including supported versions, deprecation status, and usage examples.",
        "operationId": "get_api_version_info_api_version_get",
        "responses": {
          "200": {
            "description": "API version information",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "current_version": "v1",
                  "default_version": "v1",
                  "supported_versions": {
                    "v1": {
                      "version": "v1",
                      "is_default": true,
                      "is_deprecated": false,
                      "description": "Current stable version with full feature support"
                    }
                  },
                  "version_header": "Accept",
                  "media_type_prefix": "application/vnd.reddit-platform",
                  "examples": {
                    "url_versioning": "/api/v1/keywords",
                    "header_versioning": "application/vnd.reddit-platform.v1+json",
                    "custom_header": "X-API-Version: v1"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/docs/examples": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Get API usage examples",
        "description": "Retrieve comprehensive examples for using the API including authentication, common workflows, and best practices.",
        "operationId": "get_api_examples_api_docs_examples_get",
        "responses": {
          "200": {
            "description": "API usage examples and documentation",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "authentication": {
                    "oauth2_flow": "GET /api/v1/auth/login -> POST /api/v1/auth/login",
                    "token_usage": "Authorization: Bearer <access_token>",
                    "token_refresh": "POST /api/v1/auth/refresh"
                  },
                  "common_workflows": {
                    "basic_setup": [
                      "Create keywords",
                      "Start crawling",
                      "View results"
                    ],
                    "content_generation": [
                      "Analyze trends",
                      "Generate content",
                      "Retrieve content"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AlertInfo": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp"
          },
          "resolved": {
            "type": "boolean",
            "title": "Resolved",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "title",
          "message",
          "timestamp"
        ],
        "title": "AlertInfo",
        "description": "Alert information model."
      },
      "BlogArchiveResponse": {
        "properties": {
          "year": {
            "type": "integer",
            "title": "Year"
          },
          "month": {
            "type": "integer",
            "title": "Month"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "posts": {
            "items": {
              "$ref": "#/components/schemas/PublicBlogPostSummary"
            },
            "type": "array",
            "title": "Posts"
          }
        },
        "type": "object",
        "required": [
          "year",
          "month",
          "count",
          "posts"
        ],
        "title": "BlogArchiveResponse",
        "description": "Schema for blog archive by date."
      },
      "BlogCategoryResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "slug": {
            "type": "string",
            "title": "Slug"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name",
          "slug",
          "count"
        ],
        "title": "BlogCategoryResponse",
        "description": "Schema for blog categories."
      },
      "BlogContentListResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/BlogContentResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "pages": {
            "type": "integer",
            "title": "Pages"
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "page",
          "size",
          "pages"
        ],
        "title": "BlogContentListResponse",
        "description": "Schema for paginated blog content list."
      },
      "BlogContentResponse": {
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 500,
            "minLength": 1,
            "title": "Title",
            "description": "Blog post title"
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "title": "Content",
            "description": "Markdown formatted content"
          },
          "template_used": {
            "type": "string",
            "maxLength": 100,
            "title": "Template Used",
            "description": "Template used for generation"
          },
          "meta_description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Description",
            "description": "SEO meta description"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "Content tags"
          },
          "featured_image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Featured Image Url",
            "description": "Featured image URL"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "keyword_id": {
            "type": "integer",
            "title": "Keyword Id"
          },
          "generated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Generated At"
          },
          "word_count": {
            "type": "integer",
            "title": "Word Count"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "slug": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "title",
          "content",
          "template_used",
          "id",
          "keyword_id",
          "generated_at",
          "word_count",
          "status",
          "slug",
          "created_at",
          "updated_at"
        ],
        "title": "BlogContentResponse",
        "description": "Schema for blog content response."
      },
      "BlogContentUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "content": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "meta_description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Description"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags"
          },
          "featured_image_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Featured Image Url"
          },
          "status": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^(draft|published|archived)$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status"
          }
        },
        "type": "object",
        "title": "BlogContentUpdate",
        "description": "Schema for updating blog content."
      },
      "BlogSearchResponse": {
        "properties": {
          "posts": {
            "items": {
              "$ref": "#/components/schemas/PublicBlogPostSummary"
            },
            "type": "array",
            "title": "Posts"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "query": {
            "type": "string",
            "title": "Query"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "pages": {
            "type": "integer",
            "title": "Pages"
          },
          "search_time_ms": {
            "type": "integer",
            "title": "Search Time Ms"
          }
        },
        "type": "object",
        "required": [
          "posts",
          "total",
          "query",
          "page",
          "size",
          "pages",
          "search_time_ms"
        ],
        "title": "BlogSearchResponse",
        "description": "Schema for blog search results."
      },
      "BlogStatsResponse": {
        "properties": {
          "total_posts": {
            "type": "integer",
            "title": "Total Posts"
          },
          "total_words": {
            "type": "integer",
            "title": "Total Words"
          },
          "total_tags": {
            "type": "integer",
            "title": "Total Tags"
          },
          "latest_post_date": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Latest Post Date"
          },
          "average_read_time": {
            "type": "number",
            "title": "Average Read Time"
          }
        },
        "type": "object",
        "required": [
          "total_posts",
          "total_words",
          "total_tags",
          "latest_post_date",
          "average_read_time"
        ],
        "title": "BlogStatsResponse",
        "description": "Schema for blog statistics."
      },
      "BlogTagResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "slug": {
            "type": "string",
            "title": "Slug"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          }
        },
        "type": "object",
        "required": [
          "name",
          "slug",
          "count"
        ],
        "title": "BlogTagResponse",
        "description": "Schema for blog tags."
      },
      "CommentResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "reddit_id": {
            "type": "string",
            "title": "Reddit Id"
          },
          "body": {
            "type": "string",
            "title": "Body"
          },
          "author": {
            "type": "string",
            "title": "Author"
          },
          "score": {
            "type": "integer",
            "title": "Score"
          },
          "comment_created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Comment Created At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "reddit_id",
          "body",
          "author",
          "score",
          "comment_created_at",
          "created_at",
          "updated_at"
        ],
        "title": "CommentResponse",
        "description": "Response model for comments."
      },
      "ContentGenerationRequest": {
        "properties": {
          "keyword_id": {
            "type": "integer",
            "title": "Keyword Id",
            "description": "Keyword ID to generate content for"
          },
          "template_type": {
            "type": "string",
            "title": "Template Type",
            "description": "Template type to use",
            "default": "default"
          },
          "include_trends": {
            "type": "boolean",
            "title": "Include Trends",
            "description": "Include trend analysis in content",
            "default": true
          },
          "include_top_posts": {
            "type": "boolean",
            "title": "Include Top Posts",
            "description": "Include top posts in content",
            "default": true
          },
          "max_posts": {
            "type": "integer",
            "maximum": 50.0,
            "minimum": 1.0,
            "title": "Max Posts",
            "description": "Maximum posts to include",
            "default": 10
          },
          "custom_prompt": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Prompt",
            "description": "Custom generation prompt"
          }
        },
        "type": "object",
        "required": [
          "keyword_id"
        ],
        "title": "ContentGenerationRequest",
        "description": "Schema for content generation request."
      },
      "ContentGenerationResponse": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id",
            "description": "Celery task ID"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Task status"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Status message"
          },
          "estimated_completion": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Completion",
            "description": "Estimated completion time"
          }
        },
        "type": "object",
        "required": [
          "task_id",
          "status",
          "message"
        ],
        "title": "ContentGenerationResponse",
        "description": "Schema for content generation response."
      },
      "ContentGenerationStatus": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "progress": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Progress",
            "description": "Progress percentage"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BlogContentResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          }
        },
        "type": "object",
        "required": [
          "task_id",
          "status",
          "progress",
          "message",
          "created_at"
        ],
        "title": "ContentGenerationStatus",
        "description": "Schema for content generation status."
      },
      "ContentPreview": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "content_preview": {
            "type": "string",
            "title": "Content Preview",
            "description": "First 500 characters of content"
          },
          "word_count": {
            "type": "integer",
            "title": "Word Count"
          },
          "estimated_read_time": {
            "type": "integer",
            "title": "Estimated Read Time",
            "description": "Estimated read time in minutes"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "template_used": {
            "type": "string",
            "title": "Template Used"
          }
        },
        "type": "object",
        "required": [
          "title",
          "content_preview",
          "word_count",
          "estimated_read_time",
          "tags",
          "template_used"
        ],
        "title": "ContentPreview",
        "description": "Schema for content preview."
      },
      "ErrorResponse": {
        "properties": {
          "error": {
            "type": "string",
            "title": "Error"
          },
          "error_description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Description"
          }
        },
        "type": "object",
        "required": [
          "error"
        ],
        "title": "ErrorResponse",
        "description": "Error response schema."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp"
          },
          "services": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Services"
          }
        },
        "type": "object",
        "required": [
          "status",
          "timestamp"
        ],
        "title": "HealthResponse",
        "description": "Response model for health check."
      },
      "KeywordCreate": {
        "properties": {
          "keyword": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Keyword",
            "description": "The keyword to track"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Whether the keyword is active for crawling",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "keyword"
        ],
        "title": "KeywordCreate",
        "description": "Schema for creating a new keyword."
      },
      "KeywordListResponse": {
        "properties": {
          "keywords": {
            "items": {
              "$ref": "#/components/schemas/KeywordResponse"
            },
            "type": "array",
            "title": "Keywords",
            "description": "List of keywords"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of keywords"
          },
          "page": {
            "type": "integer",
            "title": "Page",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page",
            "description": "Number of items per page"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages",
            "description": "Total number of pages"
          }
        },
        "type": "object",
        "required": [
          "keywords",
          "total",
          "page",
          "per_page",
          "total_pages"
        ],
        "title": "KeywordListResponse",
        "description": "Schema for paginated keyword list responses."
      },
      "KeywordRanking": {
        "properties": {
          "keyword_id": {
            "type": "integer",
            "title": "Keyword Id",
            "description": "ID of the keyword"
          },
          "keyword": {
            "type": "string",
            "title": "Keyword",
            "description": "The keyword text"
          },
          "importance_score": {
            "type": "number",
            "title": "Importance Score",
            "description": "Calculated importance score"
          },
          "avg_tfidf_score": {
            "type": "number",
            "title": "Avg Tfidf Score",
            "description": "Average TF-IDF score"
          },
          "avg_engagement_score": {
            "type": "number",
            "title": "Avg Engagement Score",
            "description": "Average engagement score"
          },
          "trend_velocity": {
            "type": "number",
            "title": "Trend Velocity",
            "description": "Trend velocity"
          },
          "total_posts": {
            "type": "integer",
            "title": "Total Posts",
            "description": "Total number of posts for this keyword"
          }
        },
        "type": "object",
        "required": [
          "keyword_id",
          "keyword",
          "importance_score",
          "avg_tfidf_score",
          "avg_engagement_score",
          "trend_velocity",
          "total_posts"
        ],
        "title": "KeywordRanking",
        "description": "Schema for individual keyword ranking."
      },
      "KeywordRankingResponse": {
        "properties": {
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "ID of the user"
          },
          "rankings": {
            "items": {
              "$ref": "#/components/schemas/KeywordRanking"
            },
            "type": "array",
            "title": "Rankings",
            "description": "List of keyword rankings"
          },
          "total_keywords": {
            "type": "integer",
            "title": "Total Keywords",
            "description": "Total number of keywords ranked"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "rankings",
          "total_keywords"
        ],
        "title": "KeywordRankingResponse",
        "description": "Schema for keyword ranking response."
      },
      "KeywordResponse": {
        "properties": {
          "keyword": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Keyword",
            "description": "The keyword to track"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Whether the keyword is active for crawling",
            "default": true
          },
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "Unique identifier for the keyword"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "ID of the user who owns this keyword"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "When the keyword was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "When the keyword was last updated"
          }
        },
        "type": "object",
        "required": [
          "keyword",
          "id",
          "user_id",
          "created_at",
          "updated_at"
        ],
        "title": "KeywordResponse",
        "description": "Schema for keyword responses."
      },
      "KeywordUpdate": {
        "properties": {
          "keyword": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Keyword",
            "description": "The keyword to track"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active",
            "description": "Whether the keyword is active for crawling"
          }
        },
        "type": "object",
        "title": "KeywordUpdate",
        "description": "Schema for updating an existing keyword."
      },
      "LoginResponse": {
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "tokens": {
            "$ref": "#/components/schemas/TokenResponse"
          }
        },
        "type": "object",
        "required": [
          "user",
          "tokens"
        ],
        "title": "LoginResponse",
        "description": "Response schema for successful login."
      },
      "LogoutResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "default": "Successfully logged out"
          }
        },
        "type": "object",
        "title": "LogoutResponse",
        "description": "Response schema for logout."
      },
      "PostDetailResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "keyword_id": {
            "type": "integer",
            "title": "Keyword Id"
          },
          "reddit_id": {
            "type": "string",
            "title": "Reddit Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "author": {
            "type": "string",
            "title": "Author"
          },
          "score": {
            "type": "integer",
            "title": "Score"
          },
          "num_comments": {
            "type": "integer",
            "title": "Num Comments"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "subreddit": {
            "type": "string",
            "title": "Subreddit"
          },
          "post_created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Post Created At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "comments": {
            "items": {
              "$ref": "#/components/schemas/CommentResponse"
            },
            "type": "array",
            "title": "Comments",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "id",
          "keyword_id",
          "reddit_id",
          "title",
          "author",
          "score",
          "num_comments",
          "url",
          "subreddit",
          "post_created_at",
          "created_at",
          "updated_at"
        ],
        "title": "PostDetailResponse",
        "description": "Detailed post response including comments."
      },
      "PostListResponse": {
        "properties": {
          "posts": {
            "items": {
              "$ref": "#/components/schemas/PostResponse"
            },
            "type": "array",
            "title": "Posts"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages"
          },
          "has_next": {
            "type": "boolean",
            "title": "Has Next"
          },
          "has_prev": {
            "type": "boolean",
            "title": "Has Prev"
          }
        },
        "type": "object",
        "required": [
          "posts",
          "total",
          "page",
          "per_page",
          "total_pages",
          "has_next",
          "has_prev"
        ],
        "title": "PostListResponse",
        "description": "Paginated post list response."
      },
      "PostResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "keyword_id": {
            "type": "integer",
            "title": "Keyword Id"
          },
          "reddit_id": {
            "type": "string",
            "title": "Reddit Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "author": {
            "type": "string",
            "title": "Author"
          },
          "score": {
            "type": "integer",
            "title": "Score"
          },
          "num_comments": {
            "type": "integer",
            "title": "Num Comments"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "subreddit": {
            "type": "string",
            "title": "Subreddit"
          },
          "post_created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Post Created At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "keyword_id",
          "reddit_id",
          "title",
          "author",
          "score",
          "num_comments",
          "url",
          "subreddit",
          "post_created_at",
          "created_at",
          "updated_at"
        ],
        "title": "PostResponse",
        "description": "Response model for posts."
      },
      "PublicBlogPostDetail": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Blog post title"
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Markdown formatted content"
          },
          "slug": {
            "type": "string",
            "title": "Slug",
            "description": "URL-friendly slug"
          },
          "meta_description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Description",
            "description": "SEO meta description"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "Content tags"
          },
          "featured_image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Featured Image Url",
            "description": "Featured image URL"
          },
          "word_count": {
            "type": "integer",
            "title": "Word Count",
            "description": "Content word count"
          },
          "estimated_read_time": {
            "type": "integer",
            "title": "Estimated Read Time",
            "description": "Estimated read time in minutes"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "published_at": {
            "type": "string",
            "format": "date-time",
            "title": "Published At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "title",
          "content",
          "slug",
          "word_count",
          "estimated_read_time",
          "id",
          "published_at",
          "updated_at"
        ],
        "title": "PublicBlogPostDetail",
        "description": "Schema for detailed blog post view."
      },
      "PublicBlogPostListResponse": {
        "properties": {
          "posts": {
            "items": {
              "$ref": "#/components/schemas/PublicBlogPostSummary"
            },
            "type": "array",
            "title": "Posts"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "pages": {
            "type": "integer",
            "title": "Pages"
          },
          "has_next": {
            "type": "boolean",
            "title": "Has Next"
          },
          "has_prev": {
            "type": "boolean",
            "title": "Has Prev"
          }
        },
        "type": "object",
        "required": [
          "posts",
          "total",
          "page",
          "size",
          "pages",
          "has_next",
          "has_prev"
        ],
        "title": "PublicBlogPostListResponse",
        "description": "Schema for paginated blog post list."
      },
      "PublicBlogPostSummary": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "slug": {
            "type": "string",
            "title": "Slug"
          },
          "meta_description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Description"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "featured_image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Featured Image Url"
          },
          "word_count": {
            "type": "integer",
            "title": "Word Count"
          },
          "estimated_read_time": {
            "type": "integer",
            "title": "Estimated Read Time"
          },
          "published_at": {
            "type": "string",
            "format": "date-time",
            "title": "Published At"
          },
          "excerpt": {
            "type": "string",
            "title": "Excerpt",
            "description": "First 200 characters of content"
          }
        },
        "type": "object",
        "required": [
          "id",
          "title",
          "slug",
          "meta_description",
          "tags",
          "featured_image_url",
          "word_count",
          "estimated_read_time",
          "published_at",
          "excerpt"
        ],
        "title": "PublicBlogPostSummary",
        "description": "Schema for blog post summary in list views."
      },
      "RSSFeedItem": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "link": {
            "type": "string",
            "title": "Link"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "pub_date": {
            "type": "string",
            "format": "date-time",
            "title": "Pub Date"
          },
          "guid": {
            "type": "string",
            "title": "Guid"
          }
        },
        "type": "object",
        "required": [
          "title",
          "link",
          "description",
          "pub_date",
          "guid"
        ],
        "title": "RSSFeedItem",
        "description": "Schema for RSS feed item."
      },
      "RSSFeedResponse": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "link": {
            "type": "string",
            "title": "Link"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "language": {
            "type": "string",
            "title": "Language"
          },
          "last_build_date": {
            "type": "string",
            "format": "date-time",
            "title": "Last Build Date"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/RSSFeedItem"
            },
            "type": "array",
            "title": "Items"
          }
        },
        "type": "object",
        "required": [
          "title",
          "link",
          "description",
          "language",
          "last_build_date",
          "items"
        ],
        "title": "RSSFeedResponse",
        "description": "Schema for RSS feed."
      },
      "RedditCommentResponse": {
        "properties": {
          "reddit_id": {
            "type": "string",
            "title": "Reddit Id"
          },
          "body": {
            "type": "string",
            "title": "Body"
          },
          "author": {
            "type": "string",
            "title": "Author"
          },
          "score": {
            "type": "integer",
            "title": "Score"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "reddit_id",
          "body",
          "author",
          "score",
          "created_at"
        ],
        "title": "RedditCommentResponse",
        "description": "Response model for Reddit comments."
      },
      "RedditHealthResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message",
          "timestamp"
        ],
        "title": "RedditHealthResponse",
        "description": "Response model for Reddit API health check."
      },
      "RedditPostResponse": {
        "properties": {
          "reddit_id": {
            "type": "string",
            "title": "Reddit Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "author": {
            "type": "string",
            "title": "Author"
          },
          "score": {
            "type": "integer",
            "title": "Score"
          },
          "num_comments": {
            "type": "integer",
            "title": "Num Comments"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "subreddit": {
            "type": "string",
            "title": "Subreddit"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "reddit_id",
          "title",
          "content",
          "author",
          "score",
          "num_comments",
          "url",
          "subreddit",
          "created_at"
        ],
        "title": "RedditPostResponse",
        "description": "Response model for Reddit posts."
      },
      "RelatedPostResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "slug": {
            "type": "string",
            "title": "Slug"
          },
          "excerpt": {
            "type": "string",
            "title": "Excerpt"
          },
          "published_at": {
            "type": "string",
            "format": "date-time",
            "title": "Published At"
          },
          "similarity_score": {
            "type": "number",
            "title": "Similarity Score",
            "description": "Similarity score based on tags and content"
          }
        },
        "type": "object",
        "required": [
          "id",
          "title",
          "slug",
          "excerpt",
          "published_at",
          "similarity_score"
        ],
        "title": "RelatedPostResponse",
        "description": "Schema for related posts."
      },
      "ServiceHealthResponse": {
        "properties": {
          "service": {
            "type": "string",
            "title": "Service"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "response_time_ms": {
            "type": "number",
            "title": "Response Time Ms"
          },
          "details": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Details"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "required": [
          "service",
          "status",
          "response_time_ms"
        ],
        "title": "ServiceHealthResponse",
        "description": "Response model for individual service health check."
      },
      "SitemapResponse": {
        "properties": {
          "urls": {
            "items": {
              "$ref": "#/components/schemas/SitemapUrl"
            },
            "type": "array",
            "title": "Urls"
          }
        },
        "type": "object",
        "required": [
          "urls"
        ],
        "title": "SitemapResponse",
        "description": "Schema for sitemap."
      },
      "SitemapUrl": {
        "properties": {
          "loc": {
            "type": "string",
            "title": "Loc"
          },
          "lastmod": {
            "type": "string",
            "format": "date-time",
            "title": "Lastmod"
          },
          "changefreq": {
            "type": "string",
            "title": "Changefreq",
            "default": "weekly"
          },
          "priority": {
            "type": "number",
            "title": "Priority",
            "default": 0.5
          }
        },
        "type": "object",
        "required": [
          "loc",
          "lastmod"
        ],
        "title": "SitemapUrl",
        "description": "Schema for sitemap URL."
      },
      "SystemHealth": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "timestamp": {
            "type": "string",
            "title": "Timestamp"
          },
          "services": {
            "type": "object",
            "title": "Services"
          },
          "overall_health_score": {
            "type": "number",
            "title": "Overall Health Score"
          }
        },
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "services",
          "overall_health_score"
        ],
        "title": "SystemHealth",
        "description": "System health response model."
      },
      "SystemMetrics": {
        "properties": {
          "timestamp": {
            "type": "string",
            "title": "Timestamp"
          },
          "api_requests_total": {
            "type": "integer",
            "title": "Api Requests Total"
          },
          "api_response_time_avg": {
            "type": "number",
            "title": "Api Response Time Avg"
          },
          "active_tasks": {
            "type": "integer",
            "title": "Active Tasks"
          },
          "database_connections": {
            "type": "integer",
            "title": "Database Connections"
          },
          "redis_memory_usage": {
            "type": "integer",
            "title": "Redis Memory Usage"
          },
          "crawling_success_rate": {
            "type": "number",
            "title": "Crawling Success Rate"
          },
          "system_cpu_usage": {
            "type": "number",
            "title": "System Cpu Usage"
          },
          "system_memory_usage": {
            "type": "number",
            "title": "System Memory Usage"
          },
          "system_disk_usage": {
            "type": "number",
            "title": "System Disk Usage"
          }
        },
        "type": "object",
        "required": [
          "timestamp",
          "api_requests_total",
          "api_response_time_avg",
          "active_tasks",
          "database_connections",
          "redis_memory_usage",
          "crawling_success_rate",
          "system_cpu_usage",
          "system_memory_usage",
          "system_disk_usage"
        ],
        "title": "SystemMetrics",
        "description": "System metrics response model."
      },
      "TemplateInfo": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "variables": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Variables"
          },
          "example": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Example"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "variables"
        ],
        "title": "TemplateInfo",
        "description": "Schema for template information."
      },
      "TemplateListResponse": {
        "properties": {
          "templates": {
            "items": {
              "$ref": "#/components/schemas/TemplateInfo"
            },
            "type": "array",
            "title": "Templates"
          }
        },
        "type": "object",
        "required": [
          "templates"
        ],
        "title": "TemplateListResponse",
        "description": "Schema for template list response."
      },
      "TokenRefreshRequest": {
        "properties": {
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token"
          }
        },
        "type": "object",
        "required": [
          "refresh_token"
        ],
        "title": "TokenRefreshRequest",
        "description": "Request schema for token refresh."
      },
      "TokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "bearer"
          },
          "expires_in": {
            "type": "integer",
            "title": "Expires In"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "refresh_token",
          "expires_in"
        ],
        "title": "TokenResponse",
        "description": "Response schema for token endpoints."
      },
      "TrendAnalysisResponse": {
        "properties": {
          "keyword_id": {
            "type": "integer",
            "title": "Keyword Id",
            "description": "ID of the analyzed keyword"
          },
          "keyword": {
            "type": "string",
            "title": "Keyword",
            "description": "The keyword that was analyzed"
          },
          "trend_data": {
            "type": "object",
            "title": "Trend Data",
            "description": "Trend analysis results"
          },
          "cached": {
            "type": "boolean",
            "title": "Cached",
            "description": "Whether the data was retrieved from cache"
          }
        },
        "type": "object",
        "required": [
          "keyword_id",
          "keyword",
          "trend_data",
          "cached"
        ],
        "title": "TrendAnalysisResponse",
        "description": "Schema for trend analysis response."
      },
      "TrendComparisonRequest": {
        "properties": {
          "keyword_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Keyword Ids",
            "description": "List of keyword IDs to compare"
          },
          "time_range_days": {
            "type": "integer",
            "title": "Time Range Days",
            "description": "Number of days to include in comparison",
            "default": 7
          }
        },
        "type": "object",
        "required": [
          "keyword_ids"
        ],
        "title": "TrendComparisonRequest",
        "description": "Schema for trend comparison request."
      },
      "TrendComparisonResponse": {
        "properties": {
          "keywords": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Keywords",
            "description": "List of keywords being compared"
          },
          "comparison_data": {
            "type": "object",
            "title": "Comparison Data",
            "description": "Comparison results"
          },
          "time_range_days": {
            "type": "integer",
            "title": "Time Range Days",
            "description": "Time range used for comparison"
          },
          "generated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Generated At",
            "description": "When the comparison was generated"
          }
        },
        "type": "object",
        "required": [
          "keywords",
          "comparison_data",
          "time_range_days",
          "generated_at"
        ],
        "title": "TrendComparisonResponse",
        "description": "Schema for trend comparison response."
      },
      "UserResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "oauth_provider": {
            "type": "string",
            "title": "Oauth Provider"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "email",
          "oauth_provider"
        ],
        "title": "UserResponse",
        "description": "Response schema for user information."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "example": 1,
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "example": 20,
            "description": "Items per page"
          },
          "total": {
            "type": "integer",
            "example": 150,
            "description": "Total number of items"
          },
          "pages": {
            "type": "integer",
            "example": 8,
            "description": "Total number of pages"
          },
          "has_next": {
            "type": "boolean",
            "example": true,
            "description": "Whether there is a next page"
          },
          "has_prev": {
            "type": "boolean",
            "example": false,
            "description": "Whether there is a previous page"
          }
        },
        "required": [
          "page",
          "per_page",
          "total",
          "pages",
          "has_next",
          "has_prev"
        ]
      },
      "TaskStatus": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "example": "task_123e4567-e89b-12d3-a456-426614174000"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "running",
              "completed",
              "failed"
            ],
            "example": "running"
          },
          "progress": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "example": 75
          },
          "result": {
            "type": "object",
            "nullable": true,
            "example": null
          },
          "error": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T12:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T12:05:00Z"
          }
        },
        "required": [
          "task_id",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true,
            "description": "Operation success status"
          },
          "message": {
            "type": "string",
            "example": "Operation completed successfully",
            "description": "Success message"
          },
          "data": {
            "type": "object",
            "description": "Response data"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T12:00:00Z"
          },
          "request_id": {
            "type": "string",
            "example": "req_123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "success",
          "timestamp",
          "request_id"
        ]
      },
      "KeywordExample": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Unique keyword identifier"
          },
          "keyword": {
            "type": "string",
            "example": "artificial intelligence",
            "description": "The keyword text"
          },
          "description": {
            "type": "string",
            "example": "Track AI-related discussions and trends",
            "description": "Optional keyword description"
          },
          "is_active": {
            "type": "boolean",
            "example": true,
            "description": "Whether keyword is active for crawling"
          },
          "user_id": {
            "type": "integer",
            "example": 123,
            "description": "ID of the user who owns this keyword"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T12:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T12:05:00Z"
          },
          "stats": {
            "type": "object",
            "properties": {
              "total_posts": {
                "type": "integer",
                "example": 150,
                "description": "Total posts collected for this keyword"
              },
              "last_crawl": {
                "type": "string",
                "format": "date-time",
                "example": "2024-01-01T11:00:00Z",
                "description": "Last crawling timestamp"
              },
              "avg_score": {
                "type": "number",
                "example": 45.7,
                "description": "Average post score"
              }
            }
          }
        },
        "required": [
          "id",
          "keyword",
          "is_active",
          "user_id",
          "created_at",
          "updated_at"
        ]
      },
      "PostExample": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Unique post identifier"
          },
          "reddit_id": {
            "type": "string",
            "example": "abc123",
            "description": "Reddit post ID"
          },
          "title": {
            "type": "string",
            "example": "Amazing breakthrough in AI research",
            "description": "Post title"
          },
          "content": {
            "type": "string",
            "example": "Researchers have developed a new AI model...",
            "description": "Post content"
          },
          "author": {
            "type": "string",
            "example": "reddit_user",
            "description": "Reddit username of the author"
          },
          "subreddit": {
            "type": "string",
            "example": "MachineLearning",
            "description": "Subreddit name"
          },
          "score": {
            "type": "integer",
            "example": 1250,
            "description": "Reddit post score (upvotes - downvotes)"
          },
          "num_comments": {
            "type": "integer",
            "example": 89,
            "description": "Number of comments"
          },
          "url": {
            "type": "string",
            "example": "https://reddit.com/r/MachineLearning/comments/abc123",
            "description": "Reddit post URL"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T12:00:00Z"
          },
          "keyword_id": {
            "type": "integer",
            "example": 1,
            "description": "Associated keyword ID"
          }
        },
        "required": [
          "id",
          "reddit_id",
          "title",
          "author",
          "subreddit",
          "score",
          "created_at",
          "keyword_id"
        ]
      },
      "TrendMetricsExample": {
        "type": "object",
        "properties": {
          "keyword_id": {
            "type": "integer",
            "example": 1,
            "description": "Keyword identifier"
          },
          "keyword": {
            "type": "string",
            "example": "artificial intelligence",
            "description": "Keyword text"
          },
          "time_period": {
            "type": "string",
            "example": "7d",
            "description": "Analysis time period"
          },
          "metrics": {
            "type": "object",
            "properties": {
              "total_posts": {
                "type": "integer",
                "example": 150,
                "description": "Total posts in period"
              },
              "avg_score": {
                "type": "number",
                "example": 45.7,
                "description": "Average post score"
              },
              "engagement_rate": {
                "type": "number",
                "example": 0.85,
                "description": "Engagement rate (0-1)"
              },
              "trend_velocity": {
                "type": "number",
                "example": 1.25,
                "description": "Trend velocity indicator"
              },
              "top_subreddits": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "subreddit": {
                      "type": "string",
                      "example": "MachineLearning"
                    },
                    "post_count": {
                      "type": "integer",
                      "example": 45
                    }
                  }
                }
              },
              "tfidf_scores": {
                "type": "object",
                "example": {
                  "ai": 0.85,
                  "machine": 0.72,
                  "learning": 0.68
                },
                "description": "TF-IDF scores for related terms"
              }
            }
          },
          "generated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T12:00:00Z"
          }
        },
        "required": [
          "keyword_id",
          "keyword",
          "time_period",
          "metrics",
          "generated_at"
        ]
      },
      "ContentExample": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1,
            "description": "Unique content identifier"
          },
          "title": {
            "type": "string",
            "example": "The Future of Artificial Intelligence: Trends and Insights",
            "description": "Generated content title"
          },
          "content": {
            "type": "string",
            "example": "# The Future of AI\n\nBased on recent Reddit discussions...",
            "description": "Generated content in Markdown format"
          },
          "content_type": {
            "type": "string",
            "example": "blog_post",
            "description": "Type of generated content"
          },
          "template_used": {
            "type": "string",
            "example": "default",
            "description": "Template used for generation"
          },
          "keyword_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [
              1,
              2
            ],
            "description": "Keywords used for generation"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "word_count": {
                "type": "integer",
                "example": 1250,
                "description": "Content word count"
              },
              "reading_time": {
                "type": "integer",
                "example": 5,
                "description": "Estimated reading time in minutes"
              },
              "sources_count": {
                "type": "integer",
                "example": 15,
                "description": "Number of Reddit posts used as sources"
              }
            }
          },
          "user_id": {
            "type": "integer",
            "example": 123,
            "description": "ID of the user who generated this content"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T12:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T12:05:00Z"
          }
        },
        "required": [
          "id",
          "title",
          "content",
          "content_type",
          "user_id",
          "created_at"
        ]
      },
      "HealthCheckExample": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "healthy",
              "unhealthy"
            ],
            "example": "healthy"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T12:00:00Z"
          },
          "services": {
            "type": "object",
            "properties": {
              "database": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "healthy"
                  },
                  "response_time_ms": {
                    "type": "number",
                    "example": 5.2
                  },
                  "connection_pool": {
                    "type": "string",
                    "example": "active"
                  },
                  "active_connections": {
                    "type": "integer",
                    "example": 3
                  }
                }
              },
              "redis": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "healthy"
                  },
                  "response_time_ms": {
                    "type": "number",
                    "example": 1.8
                  },
                  "memory_usage": {
                    "type": "string",
                    "example": "45MB"
                  },
                  "connected_clients": {
                    "type": "integer",
                    "example": 2
                  }
                }
              },
              "celery": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "healthy"
                  },
                  "active_workers": {
                    "type": "integer",
                    "example": 3
                  },
                  "pending_tasks": {
                    "type": "integer",
                    "example": 5
                  },
                  "processed_tasks": {
                    "type": "integer",
                    "example": 1250
                  }
                }
              }
            }
          },
          "version": {
            "type": "string",
            "example": "1.0.0",
            "description": "API version"
          },
          "uptime": {
            "type": "string",
            "example": "2d 5h 30m",
            "description": "Service uptime"
          }
        },
        "required": [
          "status",
          "timestamp",
          "services"
        ]
      },
      "AuthTokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
            "description": "JWT access token"
          },
          "refresh_token": {
            "type": "string",
            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
            "description": "JWT refresh token"
          },
          "token_type": {
            "type": "string",
            "example": "bearer",
            "description": "Token type"
          },
          "expires_in": {
            "type": "integer",
            "example": 900,
            "description": "Access token expiration in seconds"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 123
              },
              "username": {
                "type": "string",
                "example": "reddit_user"
              },
              "email": {
                "type": "string",
                "example": "user@example.com"
              }
            }
          }
        },
        "required": [
          "access_token",
          "refresh_token",
          "token_type",
          "expires_in"
        ]
      },
      "CrawlingJobResponse": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string",
            "example": "crawl_123e4567-e89b-12d3-a456-426614174000",
            "description": "Unique job identifier"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "running",
              "completed",
              "failed"
            ],
            "example": "running"
          },
          "keyword_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [
              1,
              2,
              3
            ]
          },
          "subreddits": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "MachineLearning",
              "artificial"
            ]
          },
          "progress": {
            "type": "object",
            "properties": {
              "total_keywords": {
                "type": "integer",
                "example": 3
              },
              "completed_keywords": {
                "type": "integer",
                "example": 1
              },
              "total_posts_found": {
                "type": "integer",
                "example": 150
              },
              "posts_saved": {
                "type": "integer",
                "example": 145
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T12:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T12:05:00Z"
          }
        },
        "required": [
          "job_id",
          "status",
          "keyword_ids",
          "created_at"
        ]
      },
      "APIVersionInfo": {
        "type": "object",
        "properties": {
          "current_version": {
            "type": "string",
            "example": "v1",
            "description": "Current API version"
          },
          "default_version": {
            "type": "string",
            "example": "v1",
            "description": "Default API version"
          },
          "supported_versions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "string"
                },
                "is_default": {
                  "type": "boolean"
                },
                "is_deprecated": {
                  "type": "boolean"
                },
                "sunset_date": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true
                },
                "description": {
                  "type": "string"
                }
              }
            },
            "example": {
              "v1": {
                "version": "v1",
                "is_default": true,
                "is_deprecated": false,
                "sunset_date": null,
                "description": "Current stable version with full feature support"
              }
            }
          },
          "version_header": {
            "type": "string",
            "example": "Accept",
            "description": "Header name for version specification"
          },
          "media_type_prefix": {
            "type": "string",
            "example": "application/vnd.reddit-platform",
            "description": "Media type prefix for version specification"
          },
          "examples": {
            "type": "object",
            "properties": {
              "url_versioning": {
                "type": "string",
                "example": "/api/v1/keywords"
              },
              "header_versioning": {
                "type": "string",
                "example": "application/vnd.reddit-platform.v1+json"
              },
              "custom_header": {
                "type": "string",
                "example": "X-API-Version: v1"
              }
            }
          }
        },
        "required": [
          "current_version",
          "default_version",
          "supported_versions"
        ]
      },
      "BulkOperationResponse": {
        "type": "object",
        "properties": {
          "total_requested": {
            "type": "integer",
            "example": 10,
            "description": "Total number of items requested"
          },
          "successful": {
            "type": "integer",
            "example": 8,
            "description": "Number of successful operations"
          },
          "failed": {
            "type": "integer",
            "example": 2,
            "description": "Number of failed operations"
          },
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "integer",
                  "example": 0
                },
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "data": {
                  "type": "object",
                  "description": "Result data if successful"
                },
                "error": {
                  "type": "string",
                  "description": "Error message if failed",
                  "nullable": true
                }
              }
            }
          },
          "processing_time_ms": {
            "type": "number",
            "example": 1250.5,
            "description": "Total processing time in milliseconds"
          }
        },
        "required": [
          "total_requested",
          "successful",
          "failed",
          "results"
        ]
      },
      "RateLimitInfo": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "example": 60,
            "description": "Request limit per window"
          },
          "remaining": {
            "type": "integer",
            "example": 45,
            "description": "Remaining requests in current window"
          },
          "reset": {
            "type": "integer",
            "example": 1640995200,
            "description": "Unix timestamp when limit resets"
          },
          "window": {
            "type": "string",
            "example": "1 minute",
            "description": "Rate limit window duration"
          },
          "retry_after": {
            "type": "integer",
            "example": 30,
            "description": "Seconds to wait before retrying (when limit exceeded)",
            "nullable": true
          }
        },
        "required": [
          "limit",
          "remaining",
          "reset",
          "window"
        ]
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from /auth/login endpoint"
      },
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://www.reddit.com/api/v1/authorize",
            "tokenUrl": "/api/v1/auth/token",
            "scopes": {
              "read": "Read Reddit posts and comments",
              "identity": "Access user identity information"
            }
          }
        },
        "description": "Reddit OAuth2 authentication"
      }
    },
    "responses": {
      "ValidationError": {
        "description": "Validation Error - Request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error_code": {
                  "type": "string",
                  "example": "validation_error"
                },
                "message": {
                  "type": "string",
                  "example": "Invalid input data"
                },
                "details": {
                  "type": "object",
                  "example": {
                    "keyword": [
                      "This field is required"
                    ],
                    "email": [
                      "Invalid email format"
                    ]
                  }
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-01T12:00:00Z"
                },
                "request_id": {
                  "type": "string",
                  "example": "req_123e4567-e89b-12d3-a456-426614174000"
                }
              },
              "required": [
                "error_code",
                "message",
                "timestamp",
                "request_id"
              ]
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Authentication required - Missing or invalid access token",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error_code": {
                  "type": "string",
                  "example": "unauthorized"
                },
                "message": {
                  "type": "string",
                  "example": "Authentication required"
                },
                "details": {
                  "type": "object",
                  "example": {
                    "hint": "Include 'Authorization: Bearer <token>' header"
                  }
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-01T12:00:00Z"
                },
                "request_id": {
                  "type": "string",
                  "example": "req_123e4567-e89b-12d3-a456-426614174000"
                }
              },
              "required": [
                "error_code",
                "message",
                "timestamp",
                "request_id"
              ]
            }
          }
        }
      },
      "Forbidden": {
        "description": "Insufficient permissions - Valid token but lacks required permissions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error_code": {
                  "type": "string",
                  "example": "forbidden"
                },
                "message": {
                  "type": "string",
                  "example": "Insufficient permissions"
                },
                "details": {
                  "type": "object",
                  "example": {
                    "required_permission": "admin",
                    "user_permission": "user"
                  }
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-01T12:00:00Z"
                },
                "request_id": {
                  "type": "string",
                  "example": "req_123e4567-e89b-12d3-a456-426614174000"
                }
              },
              "required": [
                "error_code",
                "message",
                "timestamp",
                "request_id"
              ]
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found - The requested resource does not exist",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error_code": {
                  "type": "string",
                  "example": "not_found"
                },
                "message": {
                  "type": "string",
                  "example": "Resource not found"
                },
                "details": {
                  "type": "object",
                  "example": {
                    "resource_type": "keyword",
                    "resource_id": "123"
                  }
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-01T12:00:00Z"
                },
                "request_id": {
                  "type": "string",
                  "example": "req_123e4567-e89b-12d3-a456-426614174000"
                }
              },
              "required": [
                "error_code",
                "message",
                "timestamp",
                "request_id"
              ]
            }
          }
        }
      },
      "RateLimitExceeded": {
        "description": "Rate limit exceeded - Too many requests",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error_code": {
                  "type": "string",
                  "example": "rate_limit_exceeded"
                },
                "message": {
                  "type": "string",
                  "example": "Rate limit exceeded"
                },
                "details": {
                  "type": "object",
                  "example": {
                    "limit": 60,
                    "window": "1 minute",
                    "retry_after": 45
                  }
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-01T12:00:00Z"
                },
                "request_id": {
                  "type": "string",
                  "example": "req_123e4567-e89b-12d3-a456-426614174000"
                }
              },
              "required": [
                "error_code",
                "message",
                "timestamp",
                "request_id"
              ]
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error - Unexpected server error occurred",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error_code": {
                  "type": "string",
                  "example": "internal_error"
                },
                "message": {
                  "type": "string",
                  "example": "An unexpected error occurred"
                },
                "details": {
                  "type": "object",
                  "example": {
                    "error_id": "err_123e4567-e89b-12d3-a456-426614174000"
                  }
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-01T12:00:00Z"
                },
                "request_id": {
                  "type": "string",
                  "example": "req_123e4567-e89b-12d3-a456-426614174000"
                }
              },
              "required": [
                "error_code",
                "message",
                "timestamp",
                "request_id"
              ]
            }
          }
        }
      },
      "ServiceUnavailable": {
        "description": "Service temporarily unavailable - Service is down for maintenance or overloaded",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error_code": {
                  "type": "string",
                  "example": "service_unavailable"
                },
                "message": {
                  "type": "string",
                  "example": "Service temporarily unavailable"
                },
                "details": {
                  "type": "object",
                  "example": {
                    "retry_after": 300,
                    "maintenance": false
                  }
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2024-01-01T12:00:00Z"
                },
                "request_id": {
                  "type": "string",
                  "example": "req_123e4567-e89b-12d3-a456-426614174000"
                }
              },
              "required": [
                "error_code",
                "message",
                "timestamp",
                "request_id"
              ]
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "authentication",
      "description": "Reddit OAuth2 authentication and JWT token management",
      "externalDocs": {
        "description": "Reddit OAuth2 Documentation",
        "url": "https://github.com/reddit-archive/reddit/wiki/OAuth2"
      }
    },
    {
      "name": "keywords",
      "description": "Keyword management for tracking specific topics on Reddit. Create, update, delete, and manage keywords that will be used for content crawling.",
      "externalDocs": {
        "description": "Keyword Management Guide",
        "url": "https://github.com/your-username/reddit-content-platform/blob/main/docs/keyword-management.md"
      }
    },
    {
      "name": "crawling",
      "description": "Reddit content crawling operations and status monitoring. Start background crawling jobs, monitor progress, and view crawling history.",
      "externalDocs": {
        "description": "Crawling Guide",
        "url": "https://github.com/your-username/reddit-content-platform/blob/main/docs/crawling-guide.md"
      }
    },
    {
      "name": "posts",
      "description": "Search and retrieve crawled Reddit posts with advanced filtering options. Access collected Reddit data with pagination and sorting.",
      "externalDocs": {
        "description": "Posts API Guide",
        "url": "https://github.com/your-username/reddit-content-platform/blob/main/docs/posts-api.md"
      }
    },
    {
      "name": "trends",
      "description": "Trend analysis and statistics from collected Reddit data using TF-IDF algorithms and engagement metrics.",
      "externalDocs": {
        "description": "Trend Analysis Guide",
        "url": "https://github.com/your-username/reddit-content-platform/blob/main/docs/trend-analysis.md"
      }
    },
    {
      "name": "content",
      "description": "AI-powered content generation based on analyzed Reddit data. Generate blog posts, articles, and other content using customizable templates.",
      "externalDocs": {
        "description": "Content Generation Guide",
        "url": "https://github.com/your-username/reddit-content-platform/blob/main/docs/content-generation.md"
      }
    },
    {
      "name": "public-blog",
      "description": "Public API endpoints for blog site integration. No authentication required. Used by frontend blog sites to display generated content.",
      "externalDocs": {
        "description": "Public Blog API Guide",
        "url": "https://github.com/your-username/reddit-content-platform/blob/main/docs/public-blog-api.md"
      }
    },
    {
      "name": "tasks",
      "description": "Background task management and monitoring. Track Celery task status, cancel running tasks, and view task history.",
      "externalDocs": {
        "description": "Task Management Guide",
        "url": "https://github.com/your-username/reddit-content-platform/blob/main/docs/task-management.md"
      }
    },
    {
      "name": "reddit",
      "description": "Direct Reddit API integration endpoints. Test Reddit connectivity and perform manual Reddit operations.",
      "externalDocs": {
        "description": "Reddit Integration Guide",
        "url": "https://github.com/your-username/reddit-content-platform/blob/main/docs/reddit-integration.md"
      }
    },
    {
      "name": "monitoring",
      "description": "System health monitoring, metrics collection, and observability endpoints. Includes Prometheus metrics and health checks.",
      "externalDocs": {
        "description": "Monitoring Guide",
        "url": "https://github.com/your-username/reddit-content-platform/blob/main/docs/monitoring.md"
      }
    }
  ],
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Development server"
    },
    {
      "url": "https://your-app.railway.app",
      "description": "Production server"
    }
  ],
  "externalDocs": {
    "description": "Find more info here",
    "url": "https://github.com/your-username/reddit-content-platform/blob/main/README.md"
  },
  "x-tagGroups": [
    {
      "name": "Authentication & Authorization",
      "tags": [
        "authentication"
      ]
    },
    {
      "name": "Content Management",
      "tags": [
        "keywords",
        "posts",
        "content"
      ]
    },
    {
      "name": "Data Collection & Analysis",
      "tags": [
        "crawling",
        "reddit",
        "trends"
      ]
    },
    {
      "name": "Public APIs",
      "tags": [
        "public-blog"
      ]
    },
    {
      "name": "System Management",
      "tags": [
        "tasks",
        "monitoring"
      ]
    }
  ],
  "x-code-samples": {
    "authentication": {
      "curl": "# Start OAuth2 flow\ncurl -X GET \"{{base_url}}/api/v1/auth/login\"\n\n# Exchange code for tokens\ncurl -X POST \"{{base_url}}/api/v1/auth/login\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"code\": \"your_auth_code\", \"state\": \"your_state\"}'\n\n# Use access token\ncurl -X GET \"{{base_url}}/api/v1/keywords\" \\\n  -H \"Authorization: Bearer your_access_token\"\n\n# Refresh token\ncurl -X POST \"{{base_url}}/api/v1/auth/refresh\" \\\n  -H \"Authorization: Bearer your_refresh_token\" ",
      "javascript": "// Authentication flow\nconst authUrl = '{{base_url}}/api/v1/auth/login';\nwindow.location.href = authUrl;\n\n// After OAuth callback, exchange code for tokens\nconst response = await fetch('{{base_url}}/api/v1/auth/login', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({ code: authCode, state: stateParam })\n});\nconst tokens = await response.json();\n\n// Use access token in subsequent requests\nconst apiResponse = await fetch('{{base_url}}/api/v1/keywords', {\n  headers: { 'Authorization': `Bearer ${tokens.access_token}` }\n});",
      "python": "import requests\n\n# Start OAuth2 flow (redirect user to this URL)\nauth_url = \"{{base_url}}/api/v1/auth/login\"\n\n# Exchange code for tokens\nresponse = requests.post(\"{{base_url}}/api/v1/auth/login\", json={\n    \"code\": \"your_auth_code\",\n    \"state\": \"your_state\"\n})\ntokens = response.json()\n\n# Use access token\nheaders = {\"Authorization\": f\"Bearer {tokens['access_token']}\"}\nresponse = requests.get(\"{{base_url}}/api/v1/keywords\", headers=headers)"
    },
    "keywords": {
      "curl": "# Create keyword\ncurl -X POST \"{{base_url}}/api/v1/keywords\" \\\n  -H \"Authorization: Bearer your_token\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"keyword\": \"artificial intelligence\", \"description\": \"AI discussions\"}'\n\n# Get keywords with pagination\ncurl -X GET \"{{base_url}}/api/v1/keywords?page=1&page_size=20\" \\\n  -H \"Authorization: Bearer your_token\" ",
      "javascript": "// Create keyword\nconst response = await fetch('{{base_url}}/api/v1/keywords', {\n  method: 'POST',\n  headers: {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    keyword: 'artificial intelligence',\n    description: 'AI discussions'\n  })\n});\n\n// Get keywords\nconst keywords = await fetch('{{base_url}}/api/v1/keywords?page=1&page_size=20', {\n  headers: { 'Authorization': `Bearer ${accessToken}` }\n}).then(r => r.json());",
      "python": "import requests\n\nheaders = {\"Authorization\": f\"Bearer {access_token}\"}\n\n# Create keyword\nresponse = requests.post(\"{{base_url}}/api/v1/keywords\", \n    headers=headers,\n    json={\"keyword\": \"artificial intelligence\", \"description\": \"AI discussions\"}\n)\n\n# Get keywords\nkeywords = requests.get(\"{{base_url}}/api/v1/keywords?page=1&page_size=20\", \n    headers=headers\n).json()"
    },
    "crawling": {
      "curl": "# Start crawling\ncurl -X POST \"{{base_url}}/api/v1/crawling/start\" \\\n  -H \"Authorization: Bearer your_token\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"keyword_ids\": [1, 2], \"limit\": 100}'\n\n# Check status\ncurl -X GET \"{{base_url}}/api/v1/crawling/status\" \\\n  -H \"Authorization: Bearer your_token\" ",
      "javascript": "// Start crawling\nconst crawlResponse = await fetch('{{base_url}}/api/v1/crawling/start', {\n  method: 'POST',\n  headers: {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({ keyword_ids: [1, 2], limit: 100 })\n});\n\n// Monitor status\nconst status = await fetch('{{base_url}}/api/v1/crawling/status', {\n  headers: { 'Authorization': `Bearer ${accessToken}` }\n}).then(r => r.json());",
      "python": "import requests\n\nheaders = {\"Authorization\": f\"Bearer {access_token}\"}\n\n# Start crawling\nresponse = requests.post(\"{{base_url}}/api/v1/crawling/start\",\n    headers=headers,\n    json={\"keyword_ids\": [1, 2], \"limit\": 100}\n)\n\n# Check status\nstatus = requests.get(\"{{base_url}}/api/v1/crawling/status\", \n    headers=headers\n).json()"
    }
  },
  "x-examples": {
    "authentication_flow": {
      "summary": "Complete authentication workflow",
      "description": "Step-by-step authentication process from OAuth2 initiation to API usage",
      "steps": [
        {
          "step": 1,
          "title": "Initiate OAuth2 Flow",
          "method": "GET",
          "endpoint": "/api/v1/auth/login",
          "description": "Redirects user to Reddit authorization page"
        },
        {
          "step": 2,
          "title": "Handle OAuth2 Callback",
          "method": "POST",
          "endpoint": "/api/v1/auth/login",
          "body": {
            "code": "authorization_code_from_reddit",
            "state": "state_parameter_for_security"
          },
          "response": {
            "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
            "refresh_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
            "token_type": "bearer",
            "expires_in": 900
          }
        },
        {
          "step": 3,
          "title": "Use Access Token",
          "method": "GET",
          "endpoint": "/api/v1/keywords",
          "headers": {
            "Authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
          }
        },
        {
          "step": 4,
          "title": "Refresh Token When Expired",
          "method": "POST",
          "endpoint": "/api/v1/auth/refresh",
          "headers": {
            "Authorization": "Bearer refresh_token_here"
          }
        }
      ]
    },
    "content_generation_workflow": {
      "summary": "Complete content generation workflow",
      "description": "From keyword setup to content generation and retrieval",
      "steps": [
        {
          "step": 1,
          "title": "Create Keywords",
          "method": "POST",
          "endpoint": "/api/v1/keywords",
          "body": {
            "keyword": "artificial intelligence",
            "description": "Track AI discussions and trends"
          }
        },
        {
          "step": 2,
          "title": "Start Data Collection",
          "method": "POST",
          "endpoint": "/api/v1/crawling/start",
          "body": {
            "keyword_ids": [
              1
            ],
            "limit": 100,
            "subreddits": [
              "MachineLearning",
              "artificial"
            ]
          }
        },
        {
          "step": 3,
          "title": "Monitor Collection Progress",
          "method": "GET",
          "endpoint": "/api/v1/crawling/status"
        },
        {
          "step": 4,
          "title": "Analyze Trends",
          "method": "GET",
          "endpoint": "/api/v1/trends?keyword_ids=1&time_period=7d"
        },
        {
          "step": 5,
          "title": "Generate Content",
          "method": "POST",
          "endpoint": "/api/v1/content/generate",
          "body": {
            "content_type": "blog_post",
            "keyword_ids": [
              1
            ],
            "template_id": 1
          }
        },
        {
          "step": 6,
          "title": "Retrieve Generated Content",
          "method": "GET",
          "endpoint": "/api/v1/content/{content_id}"
        }
      ]
    },
    "error_handling_examples": {
      "summary": "Common error scenarios and responses",
      "description": "Examples of error responses and how to handle them",
      "scenarios": [
        {
          "scenario": "Invalid Authentication",
          "status_code": 401,
          "response": {
            "error_code": "unauthorized",
            "message": "Authentication required",
            "details": {
              "hint": "Include 'Authorization: Bearer <token>' header"
            },
            "timestamp": "2024-01-01T12:00:00Z",
            "request_id": "req_123e4567-e89b-12d3-a456-426614174000"
          }
        },
        {
          "scenario": "Validation Error",
          "status_code": 422,
          "response": {
            "error_code": "validation_error",
            "message": "Invalid input data",
            "details": {
              "keyword": [
                "This field is required"
              ],
              "description": [
                "String too short"
              ]
            },
            "timestamp": "2024-01-01T12:00:00Z",
            "request_id": "req_123e4567-e89b-12d3-a456-426614174000"
          }
        },
        {
          "scenario": "Rate Limit Exceeded",
          "status_code": 429,
          "response": {
            "error_code": "rate_limit_exceeded",
            "message": "Rate limit exceeded",
            "details": {
              "limit": 60,
              "window": "1 minute",
              "retry_after": 45
            },
            "timestamp": "2024-01-01T12:00:00Z",
            "request_id": "req_123e4567-e89b-12d3-a456-426614174000"
          }
        }
      ]
    },
    "pagination_examples": {
      "summary": "Pagination patterns and examples",
      "description": "How to handle paginated responses across different endpoints",
      "examples": [
        {
          "endpoint": "/api/v1/keywords",
          "request": "GET /api/v1/keywords?page=2&page_size=20",
          "response": {
            "data": [
              {
                "id": 21,
                "keyword": "machine learning",
                "description": "ML discussions",
                "is_active": true,
                "created_at": "2024-01-01T12:00:00Z"
              }
            ],
            "pagination": {
              "page": 2,
              "per_page": 20,
              "total": 150,
              "pages": 8,
              "has_next": true,
              "has_prev": true
            }
          }
        },
        {
          "endpoint": "/api/v1/posts",
          "request": "GET /api/v1/posts?limit=50&offset=100",
          "response": {
            "data": [
              "...posts..."
            ],
            "pagination": {
              "limit": 50,
              "offset": 100,
              "total": 1500,
              "has_more": true
            }
          }
        }
      ]
    }
  },
  "x-schema-examples": {
    "request_examples": {
      "create_keyword": {
        "summary": "Create a new keyword",
        "value": {
          "keyword": "artificial intelligence",
          "description": "Track AI-related discussions and trends",
          "is_active": true
        }
      },
      "bulk_create_keywords": {
        "summary": "Create multiple keywords",
        "value": {
          "keywords": [
            {
              "keyword": "machine learning",
              "description": "ML algorithms and applications"
            },
            {
              "keyword": "deep learning",
              "description": "Neural networks and deep learning"
            },
            {
              "keyword": "natural language processing",
              "description": "NLP and text processing"
            }
          ]
        }
      },
      "start_crawling": {
        "summary": "Start crawling with specific parameters",
        "value": {
          "keyword_ids": [
            1,
            2,
            3
          ],
          "subreddits": [
            "MachineLearning",
            "artificial",
            "technology"
          ],
          "limit": 100,
          "time_filter": "week",
          "sort": "hot"
        }
      },
      "generate_content": {
        "summary": "Generate blog content",
        "value": {
          "content_type": "blog_post",
          "keyword_ids": [
            1,
            2
          ],
          "template_id": 1,
          "custom_prompt": "Write a comprehensive analysis of recent AI trends",
          "date_from": "2024-01-01T00:00:00Z",
          "date_to": "2024-01-31T23:59:59Z",
          "max_posts": 50,
          "min_score": 10
        }
      }
    },
    "response_examples": {
      "keyword_response": {
        "summary": "Keyword with statistics",
        "value": {
          "id": 1,
          "keyword": "artificial intelligence",
          "description": "Track AI-related discussions and trends",
          "is_active": true,
          "user_id": 123,
          "created_at": "2024-01-01T12:00:00Z",
          "updated_at": "2024-01-01T12:05:00Z",
          "stats": {
            "total_posts": 150,
            "last_crawl": "2024-01-01T11:00:00Z",
            "avg_score": 45.7,
            "top_subreddits": [
              "MachineLearning",
              "artificial",
              "technology"
            ]
          }
        }
      },
      "post_response": {
        "summary": "Reddit post with metadata",
        "value": {
          "id": 1,
          "reddit_id": "abc123",
          "title": "Amazing breakthrough in AI research",
          "content": "Researchers have developed a new AI model that...",
          "author": "reddit_user",
          "subreddit": "MachineLearning",
          "score": 1250,
          "num_comments": 89,
          "url": "https://reddit.com/r/MachineLearning/comments/abc123",
          "created_at": "2024-01-01T12:00:00Z",
          "keyword_id": 1,
          "sentiment_score": 0.8,
          "engagement_rate": 0.15
        }
      },
      "trend_analysis_response": {
        "summary": "Comprehensive trend analysis",
        "value": {
          "keyword_id": 1,
          "keyword": "artificial intelligence",
          "time_period": "7d",
          "metrics": {
            "total_posts": 150,
            "avg_score": 45.7,
            "engagement_rate": 0.85,
            "trend_velocity": 1.25,
            "sentiment_distribution": {
              "positive": 0.6,
              "neutral": 0.3,
              "negative": 0.1
            },
            "top_subreddits": [
              {
                "subreddit": "MachineLearning",
                "post_count": 45
              },
              {
                "subreddit": "artificial",
                "post_count": 32
              },
              {
                "subreddit": "technology",
                "post_count": 28
              }
            ],
            "tfidf_scores": {
              "ai": 0.85,
              "machine": 0.72,
              "learning": 0.68,
              "algorithm": 0.55,
              "neural": 0.48
            },
            "trending_terms": [
              {
                "term": "transformer",
                "score": 0.92,
                "growth": 0.35
              },
              {
                "term": "gpt",
                "score": 0.88,
                "growth": 0.28
              },
              {
                "term": "llm",
                "score": 0.75,
                "growth": 0.45
              }
            ]
          },
          "generated_at": "2024-01-01T12:00:00Z",
          "cache_expires_at": "2024-01-01T13:00:00Z"
        }
      },
      "content_generation_response": {
        "summary": "Generated content with metadata",
        "value": {
          "id": 1,
          "title": "The Future of Artificial Intelligence: Trends and Insights from Reddit",
          "content": "# The Future of AI\n\nBased on recent Reddit discussions...",
          "content_type": "blog_post",
          "template_used": "default",
          "keyword_ids": [
            1,
            2
          ],
          "metadata": {
            "word_count": 1250,
            "reading_time": 5,
            "sources_count": 15,
            "generated_sections": [
              "introduction",
              "trends",
              "analysis",
              "conclusion"
            ],
            "quality_score": 0.87
          },
          "user_id": 123,
          "created_at": "2024-01-01T12:00:00Z",
          "updated_at": "2024-01-01T12:05:00Z",
          "generation_stats": {
            "processing_time_seconds": 45.2,
            "posts_analyzed": 150,
            "template_version": "1.2.0"
          }
        }
      }
    }
  },
  "x-rate-limits": {
    "general": "60 requests per minute per user",
    "reddit_api": "60 requests per minute (shared)",
    "content_generation": "10 requests per hour per user",
    "public_api": "100 requests per minute per IP"
  },
  "x-api-guidelines": {
    "authentication": {
      "description": "All endpoints except public blog API require authentication",
      "token_lifetime": "Access tokens expire in 15 minutes, refresh tokens in 7 days",
      "best_practices": [
        "Store tokens securely",
        "Implement automatic token refresh",
        "Handle 401 responses gracefully"
      ]
    },
    "pagination": {
      "description": "List endpoints support pagination",
      "parameters": [
        "page",
        "page_size",
        "limit",
        "offset"
      ],
      "max_page_size": 100,
      "default_page_size": 20
    },
    "error_handling": {
      "description": "All errors follow consistent format",
      "include_request_id": true,
      "retry_strategy": "Exponential backoff for 5xx errors"
    }
  }
}