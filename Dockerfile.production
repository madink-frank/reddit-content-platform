# Multi-stage production Dockerfile for optimized deployment
FROM python:3.12-slim as builder

# Set build environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        libpq-dev \
        gcc \
        g++ \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy and install Python dependencies
COPY requirements.txt .
RUN pip install --upgrade pip \
    && pip install -r requirements.txt

# Production stage
FROM python:3.12-slim as production

# Set production environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PATH="/opt/venv/bin:$PATH" \
    PORT=8000 \
    ENVIRONMENT=production

# Install runtime dependencies only
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        libpq5 \
        curl \
        ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set work directory
WORKDIR /app

# Copy application code with proper ownership
COPY --chown=appuser:appuser . .

# Remove development files and optimize
RUN rm -rf \
    tests/ \
    test_*.py \
    .pytest_cache/ \
    .coverage \
    *.md \
    .git/ \
    .gitignore \
    .env.example \
    docker-compose*.yml \
    Dockerfile* \
    scripts/dev-start.sh \
    && find . -type f -name "*.pyc" -delete \
    && find . -type d -name "__pycache__" -delete

# Switch to non-root user
USER appuser

# Expose port
EXPOSE $PORT

# Enhanced health check with timeout and proper error handling
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:$PORT/health || exit 1

# Production command with optimized settings
CMD ["sh", "-c", "uvicorn app.main:app --host 0.0.0.0 --port $PORT --workers ${WORKERS:-1} --worker-class uvicorn.workers.UvicornWorker --access-log --log-level ${LOG_LEVEL:-info} --no-server-header"]