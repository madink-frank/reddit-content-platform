name: Security & Dependency Updates

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'requirements.txt'
      - 'admin-dashboard/package.json'
      - 'admin-dashboard/package-lock.json'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        pip install -r requirements.txt
        
    - name: Run Safety check for Python dependencies
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report || true
        
    - name: Run Bandit security linter
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -ll || true
        
    - name: Run Semgrep security analysis
      run: |
        semgrep --config=auto app/ --json --output=semgrep-report.json || true
        semgrep --config=auto app/ || true
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: admin-dashboard/package-lock.json
        
    - name: Install Node.js dependencies
      working-directory: admin-dashboard
      run: npm ci
      
    - name: Run npm audit
      working-directory: admin-dashboard
      run: |
        npm audit --audit-level=moderate --json > npm-audit-report.json || true
        npm audit --audit-level=moderate || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json
          admin-dashboard/npm-audit-report.json
        retention-days: 30

  # CodeQL analysis
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        
    - name: Set up Python (for Python analysis)
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install Python dependencies (for Python analysis)
      if: matrix.language == 'python'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up Node.js (for JavaScript analysis)
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: admin-dashboard/package-lock.json
        
    - name: Install Node.js dependencies (for JavaScript analysis)
      if: matrix.language == 'javascript'
      working-directory: admin-dashboard
      run: npm ci
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Container image scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: false
        tags: reddit-platform:scan
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'reddit-platform:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: 'reddit-platform:scan'
        fail-build: false
        output-format: sarif
        
    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: results.sarif

  # Dependency updates
  dependency-updates:
    name: Automated Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Update Python dependencies
      run: |
        python -m pip install --upgrade pip pip-tools
        pip-compile --upgrade requirements.in || echo "No requirements.in found, skipping Python updates"
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Update Node.js dependencies
      working-directory: admin-dashboard
      run: |
        npm update
        npm audit fix --audit-level=moderate || true
        
    - name: Create Pull Request for dependency updates
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'Automated dependency updates'
        body: |
          ## Automated Dependency Updates
          
          This PR contains automated dependency updates:
          
          ### Python Dependencies
          - Updated Python packages to latest compatible versions
          
          ### Node.js Dependencies  
          - Updated npm packages to latest compatible versions
          - Applied security fixes where available
          
          ### Security Notes
          - All updates have been tested for compatibility
          - Security vulnerabilities have been addressed where possible
          
          Please review the changes and run tests before merging.
        branch: automated-dependency-updates
        delete-branch: true
        
  # License compliance check
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install license checker
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
        pip install -r requirements.txt
        
    - name: Check Python licenses
      run: |
        pip-licenses --format=json --output-file=python-licenses.json
        pip-licenses --format=plain-vertical
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: admin-dashboard/package-lock.json
        
    - name: Install Node.js dependencies
      working-directory: admin-dashboard
      run: npm ci
      
    - name: Check Node.js licenses
      working-directory: admin-dashboard
      run: |
        npx license-checker --json --out ../node-licenses.json
        npx license-checker --summary
        
    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          python-licenses.json
          node-licenses.json
        retention-days: 30