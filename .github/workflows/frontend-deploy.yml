name: Frontend Deployment Pipeline

on:
  workflow_run:
    workflows: ["CD Pipeline"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      app:
        description: 'Application to deploy'
        required: true
        default: 'both'
        type: choice
        options:
        - admin-dashboard
        - blog-site
        - both

env:
  NODE_VERSION: '20'

jobs:
  # Deploy to CDN/Static hosting
  deploy-to-cdn:
    name: Deploy to CDN
    runs-on: ubuntu-latest
    if: |
      (github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'workflow_dispatch')
    
    strategy:
      matrix:
        app: [admin-dashboard, blog-site]
        environment: [staging, production]
        exclude:
          - environment: production
        include:
          - environment: production
            condition: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.app }}-${{ matrix.environment }}-build
        path: ${{ matrix.app }}/dist/
        
    - name: Configure AWS credentials (if using AWS S3/CloudFront)
      if: env.AWS_ACCESS_KEY_ID != ''
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Deploy to S3 and invalidate CloudFront
      if: env.AWS_ACCESS_KEY_ID != ''
      run: |
        # Sync files to S3 with appropriate cache headers
        aws s3 sync ${{ matrix.app }}/dist/ s3://${{ secrets[format('S3_BUCKET_{0}_{1}', upper(matrix.app), upper(matrix.environment))] }}/ \
          --delete \
          --cache-control "public, max-age=31536000" \
          --exclude "*.html" \
          --exclude "manifest.json" \
          --exclude "service-worker.js"
          
        # Upload HTML files with shorter cache
        aws s3 sync ${{ matrix.app }}/dist/ s3://${{ secrets[format('S3_BUCKET_{0}_{1}', upper(matrix.app), upper(matrix.environment))] }}/ \
          --cache-control "public, max-age=3600" \
          --include "*.html" \
          --include "manifest.json" \
          --include "service-worker.js"
          
        # Invalidate CloudFront cache
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets[format('CLOUDFRONT_DISTRIBUTION_ID_{0}_{1}', upper(matrix.app), upper(matrix.environment))] }} \
          --paths "/*"
          
    - name: Deploy to Vercel (alternative)
      if: matrix.app == 'blog-site' && env.VERCEL_TOKEN != ''
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets[format('VERCEL_PROJECT_ID_{0}', upper(matrix.environment))] }}
        working-directory: blog-site
        vercel-args: ${{ matrix.environment == 'production' && '--prod' || '' }}
        
    - name: Deploy to Netlify (alternative)
      if: matrix.app == 'admin-dashboard' && env.NETLIFY_AUTH_TOKEN != ''
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: admin-dashboard/dist
        production-branch: main
        production-deploy: ${{ matrix.environment == 'production' }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions - ${{ github.sha }}"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets[format('NETLIFY_SITE_ID_{0}_{1}', upper(matrix.app), upper(matrix.environment))] }}
        
    - name: Update deployment status
      run: |
        echo "Deployment completed for ${{ matrix.app }} to ${{ matrix.environment }}"
        echo "Build size: $(du -sh ${{ matrix.app }}/dist | cut -f1)"
        echo "Files deployed: $(find ${{ matrix.app }}/dist -type f | wc -l)"

  # Performance testing after deployment
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-to-cdn
    if: always() && needs.deploy-to-cdn.result == 'success'
    
    strategy:
      matrix:
        app: [admin-dashboard, blog-site]
        environment: [staging, production]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
      
    - name: Set test URLs
      run: |
        if [ "${{ matrix.app }}" = "admin-dashboard" ]; then
          if [ "${{ matrix.environment }}" = "staging" ]; then
            echo "TEST_URL=https://staging-admin.reddit-platform.com" >> $GITHUB_ENV
          else
            echo "TEST_URL=https://admin.reddit-platform.com" >> $GITHUB_ENV
          fi
        else
          if [ "${{ matrix.environment }}" = "staging" ]; then
            echo "TEST_URL=https://staging-blog.reddit-platform.com" >> $GITHUB_ENV
          else
            echo "TEST_URL=https://blog.reddit-platform.com" >> $GITHUB_ENV
          fi
        fi
        
    - name: Run Lighthouse CI
      run: |
        lhci autorun \
          --upload.target=temporary-public-storage \
          --collect.url=${{ env.TEST_URL }} \
          --collect.numberOfRuns=3 \
          --assert.assertions.categories:performance=0.8 \
          --assert.assertions.categories:accessibility=0.9 \
          --assert.assertions.categories:best-practices=0.8 \
          --assert.assertions.categories:seo=0.8
          
    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-results-${{ matrix.app }}-${{ matrix.environment }}
        path: .lighthouseci/
        retention-days: 7

  # Security scanning for deployed applications
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: deploy-to-cdn
    if: always() && needs.deploy-to-cdn.result == 'success'
    
    strategy:
      matrix:
        app: [admin-dashboard, blog-site]
        environment: [staging, production]
    
    steps:
    - name: Set test URLs
      run: |
        if [ "${{ matrix.app }}" = "admin-dashboard" ]; then
          if [ "${{ matrix.environment }}" = "staging" ]; then
            echo "TEST_URL=https://staging-admin.reddit-platform.com" >> $GITHUB_ENV
          else
            echo "TEST_URL=https://admin.reddit-platform.com" >> $GITHUB_ENV
          fi
        else
          if [ "${{ matrix.environment }}" = "staging" ]; then
            echo "TEST_URL=https://staging-blog.reddit-platform.com" >> $GITHUB_ENV
          else
            echo "TEST_URL=https://blog.reddit-platform.com" >> $GITHUB_ENV
          fi
        fi
        
    - name: Run OWASP ZAP security scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: ${{ env.TEST_URL }}
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: Upload ZAP scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: zap-results-${{ matrix.app }}-${{ matrix.environment }}
        path: report_html.html
        retention-days: 7

  # Notify deployment completion
  notify-completion:
    name: Notify Deployment Completion
    runs-on: ubuntu-latest
    needs: [deploy-to-cdn, performance-test, security-scan]
    if: always()
    
    steps:
    - name: Prepare notification message
      run: |
        if [ "${{ needs.deploy-to-cdn.result }}" = "success" ]; then
          echo "DEPLOY_STATUS=✅ Success" >> $GITHUB_ENV
        else
          echo "DEPLOY_STATUS=❌ Failed" >> $GITHUB_ENV
        fi
        
        if [ "${{ needs.performance-test.result }}" = "success" ]; then
          echo "PERF_STATUS=✅ Passed" >> $GITHUB_ENV
        else
          echo "PERF_STATUS=⚠️ Issues" >> $GITHUB_ENV
        fi
        
        if [ "${{ needs.security-scan.result }}" = "success" ]; then
          echo "SEC_STATUS=✅ Secure" >> $GITHUB_ENV
        else
          echo "SEC_STATUS=⚠️ Issues" >> $GITHUB_ENV
        fi
        
    - name: Send Slack notification
      if: env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "Frontend Deployment Complete",
            "attachments": [
              {
                "color": "${{ needs.deploy-to-cdn.result == 'success' && 'good' || 'danger' }}",
                "fields": [
                  {
                    "title": "Deployment",
                    "value": "${{ env.DEPLOY_STATUS }}",
                    "short": true
                  },
                  {
                    "title": "Performance",
                    "value": "${{ env.PERF_STATUS }}",
                    "short": true
                  },
                  {
                    "title": "Security",
                    "value": "${{ env.SEC_STATUS }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": true
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}