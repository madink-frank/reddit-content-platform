name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'

jobs:
  # Backend linting and formatting
  backend-lint:
    name: Backend Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8
        pip install -r requirements.txt
        
    - name: Run Black formatter check
      run: black --check --diff .
      
    - name: Run isort import sorting check
      run: isort --check-only --diff .
      
    - name: Run flake8 linting
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: Run flake8 complexity check
      run: flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # Frontend linting and formatting
  frontend-lint:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: admin-dashboard/package-lock.json
        
    - name: Install dependencies
      working-directory: admin-dashboard
      run: npm ci
      
    - name: Run TypeScript type check
      working-directory: admin-dashboard
      run: npm run type-check
      
    - name: Run ESLint
      working-directory: admin-dashboard
      run: npm run lint
      
    - name: Run Prettier format check
      working-directory: admin-dashboard
      run: npm run format:check

  # Backend testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: backend-lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> .env
        echo "REDIS_URL=redis://localhost:6379" >> .env
        echo "CELERY_BROKER_URL=redis://localhost:6379/0" >> .env
        echo "CELERY_RESULT_BACKEND=redis://localhost:6379/0" >> .env
        echo "JWT_SECRET_KEY=test-secret-key-for-ci" >> .env
        echo "REDDIT_CLIENT_ID=test_client_id" >> .env
        echo "REDDIT_CLIENT_SECRET=test_client_secret" >> .env
        echo "ENVIRONMENT=testing" >> .env
        
    - name: Run database migrations
      run: |
        alembic upgrade head
        
    - name: Run unit tests
      run: |
        pytest -m unit --cov=app --cov-report=xml --cov-report=term-missing
        
    - name: Run integration tests
      run: |
        pytest -m integration --cov=app --cov-append --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Frontend testing
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: frontend-lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: admin-dashboard/package-lock.json
        
    - name: Install dependencies
      working-directory: admin-dashboard
      run: npm ci
      
    - name: Run tests
      working-directory: admin-dashboard
      run: npm run test:run
      
    - name: Run tests with coverage
      working-directory: admin-dashboard
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./admin-dashboard/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Python security check with Safety
      run: |
        python -m pip install --upgrade pip
        pip install safety
        safety check --json --output safety-report.json || true
        
    - name: Node.js security audit
      working-directory: admin-dashboard
      run: |
        npm audit --audit-level=moderate || true

  # Build validation
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: reddit-platform:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build production Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: false
        tags: reddit-platform:prod-test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Set up Node.js for frontend build
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: admin-dashboard/package-lock.json
        
    - name: Build frontend
      working-directory: admin-dashboard
      run: |
        npm ci
        npm run build
        
    - name: Test Docker container startup
      run: |
        docker run --name test-container -d -p 8000:8000 \
          -e DATABASE_URL=sqlite:///./test.db \
          -e REDIS_URL=redis://localhost:6379 \
          -e JWT_SECRET_KEY=test-key \
          -e REDDIT_CLIENT_ID=test \
          -e REDDIT_CLIENT_SECRET=test \
          reddit-platform:test
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-container
        docker rm test-container